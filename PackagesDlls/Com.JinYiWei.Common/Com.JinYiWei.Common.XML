<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Com.JinYiWei.Common</name>
    </assembly>
    <members>
        <member name="T:Com.JinYiWei.Common.Collections.ComparisonHelper`1">
            <summary>
            比较器辅助类，用于快速创建<see cref="T:System.Collections.Generic.IComparer`1"/>接口的实例
            </summary>
            <example>
            var comparer1 = Comparison[Person].CreateComparer(p => p.ID); var comparer2 = Comparison[Person].CreateComparer(p => p.Name); var comparer3 = Comparison[Person].CreateComparer(p => p.Birthday.Year)
            </example>
            <typeparam name="T">要比较的类型</typeparam>
        </member>
        <member name="M:Com.JinYiWei.Common.Collections.ComparisonHelper`1.CreateComparer``1(System.Func{`0,``0})">
            <summary>
            创建指定对比委托<paramref name="keySelector"/>的实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Collections.ComparisonHelper`1.CreateComparer``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            创建指定对比委托<paramref name="keySelector"/>与结果二次比较器<paramref name="comparer"/>的实例
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Collections.EqualityHelper`1">
            <summary>
            相等比较辅助类，用于快速创建<see cref="T:System.Collections.Generic.IEqualityComparer`1"/>的实例
            </summary>
            <example>
            var equalityComparer1 = EqualityHelper{Person}.CreateComparer(p => p.ID);
            var equalityComparer2 = EqualityHelper[Person].CreateComparer(p => p.Name);
            var equalityComparer3 = EqualityHelper[Person].CreateComparer(p => p.Birthday.Year);
            </example>
            <typeparam name="T"> </typeparam>
        </member>
        <member name="M:Com.JinYiWei.Common.Collections.EqualityHelper`1.CreateComparer``1(System.Func{`0,``0})">
            <summary>
            创建指定对比委托<paramref name="keySelector"/>的实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Collections.EqualityHelper`1.CreateComparer``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            创建指定对比委托<paramref name="keySelector"/>与结果二次比较器<paramref name="comparer"/>的实例
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.DataAccess.BaseDBRepository">
            <summary>
            最新的常用的DBRepository类，可用于轻量型的dapper orm等
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseDBRepository.GetConnection(System.Boolean)">
            <summary>
            获取数据库连接
            </summary>
            <param name="IsWrite"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseDBRepository.TryTrans(System.Data.IDbTransaction,System.Action)">
            <summary>
            事物处理
            </summary>
            <param name="transaction"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.ReadFromReader``1(System.Data.SqlClient.SqlDataReader,System.String)">
            <summary>
            使用DataReader中的数据填充业务类
            </summary>
            <param name="DBReader">包含数据的DataReader对象</param>
            <param name="Prefix">数据库字段前缀，解决属性名与数据库字段名的不同，如Proper:UserName Column:v_UserName,则v_为前缀</param>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.ReadFromDataRow``1(System.Data.DataRow)">
            <summary>
            使用DataRow填充业务类
            </summary>
            <param name="Row">含有数据的DataRow对象</param>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.BeginTrans(System.String)">
             <summary>
            开始事务处理
             </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.CommitTrans">
            <summary>
            提交事务处理
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.RollBack">
            <summary>
            回滚事务处理
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.TryTrans(System.String,System.Action)">
            <summary>
            事务处理
            </summary>
            <param name="transactionId"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.InsertObj_DB``1(``0,System.String,System.String,Com.JinYiWei.Common.DataAccess.DataBase)">
            <summary>
            普通拼接sql语句插入实体类,tableName表名为空则根据反射生成表名，excludeString为空表名没有排除的字段，
            db为空这重新new一个DataBase
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="t">实体类，里面包含具体字段的值</param>
            <param name="tableName">表名</param>
            <param name="excludeString">排除的字段，例如一些自动生成的主键之类的</param>
            <param name="db">当前使用的DataBase</param>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.InsertObj_Trans``1(``0,System.String,System.String,System.Boolean)">
            <summary>
            使用事物拼接sql语句插入实体,tableName表名为空则根据反射生成表名，excludeString为空表名没有排除的字段，
            isTrans默认为false不启用事物
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="t">实体类</param>
            <param name="tableName">表名，默认为""</param>
            <param name="excludeString">排除的字段，默认为""</param>
            <param name="isTrans">是否开启事物，默认为false</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.InsertObj_Trans_Param``1(``0,System.String,System.String,System.Boolean)">
            <summary>
            参数化insert,如insert into table(field1) values(@field1)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="tableName"></param>
            <param name="ExcludeString"></param>
            <param name="isTrans"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.InsertObj_DB_Param``1(``0,System.String,System.String,Com.JinYiWei.Common.DataAccess.DataBase)">
            <summary>
            参数化insert,如insert into table(field1) values(@field1)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="tableName"></param>
            <param name="ExcludeString"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.UpdateObj_Trans_Param``1(``0,System.String,System.String,System.String,System.Boolean)">
            <summary>
            参数化Update
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="keyCol"></param>
            <param name="tableName"></param>
            <param name="ExcludeString"></param>
            <param name="isTrans"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.DeleteObj_Trans_Param``1(``0,System.String,System.String,System.Boolean)">
            <summary>
            参数化delete
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="keyCol"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.GetObjByParam``1(``0,System.String,System.String[],System.String)">
            <summary>
            根据条件获取第一个实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="t">查询条件</param>
            <param name="include">包含的字段</param>
            <param name="where">where条件</param>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.GetObjListByParam``1(``0,System.String,System.String[],System.String,System.String)">
            <summary>
            根据条件获取List
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="t">查询条件</param>
            <param name="include">包含的字段</param>
            <param name="where">where条件</param>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.GetPagedList``1(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            获取分页结果
            </summary>
            <param name="sql">准备执行的sql语句</param>
            <param name="pageIndex">页索引</param>
            <param name="pageSize">页大小</param>
            <param name="total">返回总行数</param>
            <returns>返回列表</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.SqlQuery``1(System.String)">
            <summary>
            根据指定的SQL语句查询符合条件的业务对象实例集合
            </summary>
            <param name="commandText">查询语句</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.SqlQuery_Param``1(System.String,System.Data.SqlClient.SqlParameter[],System.Boolean)">
            <summary>
            根据指定的SQL语句查询符合条件的业务对象实例集合
            </summary>
            <param name="commandText">查询语句</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.SqlExec(System.String,System.Boolean)">
            <summary>
            执行SQL语句
            </summary>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.SqlExec_Param(System.String,System.Data.SqlClient.SqlParameter[],System.Boolean)">
            <summary>
            执行SQL语句
            </summary>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.SqlQueryNumber(System.String)">
            <summary>
            执行sql语句 返回count
            </summary>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.SqlExecList(System.Collections.Generic.IList{System.String})">
            <summary>
            执行一批SQL语句，放在事务里
            </summary>
            <param name="commandList"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.SqlQueryNumber``1(System.String,System.String)">
            <summary>
            根据指定的SQL语句查询出整数结果
            </summary>
            <param name="commandText">查询语句</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.QuotedStr(System.String)">
            <summary>
            加单引号
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.GetPager``1(System.Int32@,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            MySql分页
            </summary>
            <param name="total">总条数</param>
            <param name="sql">sql</param>
            <param name="orderExpression">排序 例如 ID</param>
            <param name="pageIdex">当前页</param>
            <param name="pageSize">页大小</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.SqlQuery2C``1(System.String)">
            <summary>
            根据指定的SQL语句查询符合条件的业务对象实例集合
            </summary>
            <param name="commandText">查询语句</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.SqlExcProcedure``2(``1,System.String,System.String)">
            <summary>
            执行存储过程
            </summary>
            <param name="produceName"></param>
            <param name="paramDic"></param>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.BaseService.GetEntityPages``1(``0,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页查询
            </summary>
            <param name="entity">实体类</param>
            <param name="tableName">表名</param>
            <param name="PrimaryKeyField">主键字段</param>
            <param name="Field">查询字段</param>
            <param name="pageSize">每页行数</param>
            <param name="PageNumber">第几页</param>
            <param name="pageTotals">总数</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.DataBase.#ctor(System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="IsWrite">是否写操作</param>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.DataBase.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.DataBase.NewCommand(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Command
            </summary>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.DataBase.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            将SqlParameter参数数组(参数值)分配给SqlCommand命令. 
            这个方法将给任何一个参数分配DBNull.Value; 
            该操作将阻止默认值的使用. 
            </summary> 
            <param name="command">命令名</param> 
            <param name="commandParameters">SqlParameters数组</param> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.DataBase.BeginTrans">
             <summary>
            开始事务处理
             </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.DataBase.CommitTrans">
            <summary>
            提交事务处理
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.DataBase.RollBack">
            <summary>
            回滚事务处理
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.DTExtensions.ToJson(System.Data.DataTable)">
            <summary>      
            dataTable转换成Json格式      
            </summary>      
            <param name="dt"></param>      
            <returns></returns>      
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.DTExtensions.ToJson(System.Data.DataSet)">
            <summary>  
            DataSet转换成Json格式  
            </summary>  
            <param name="ds">DataSet</param> 
            <returns></returns>  
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.DTExtensions.ToJson(System.Data.Common.DbDataReader)">
            <summary>    
            DataReader转换为Json    
            </summary>    
            <param name="dataReader">DataReader对象</param>    
            <returns>Json字符串</returns>    
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.DTExtensions.StringFormat(System.String,System.Type)">
            <summary>   
            格式化字符型、日期型、布尔型   
            </summary>   
            <param name="str"></param>   
            <param name="type"></param>   
            <returns></returns>   
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.DTExtensions.String2Json(System.String)">
            <summary>   
            过滤特殊字符   
            </summary>   
            <param name="s"></param>   
            <returns></returns>   
        </member>
        <member name="T:Com.JinYiWei.Common.DataAccess.HttpPage">
            <summary>
            分页参数
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.DataAccess.HttpPage.DataSourceId">
            <summary>
            数据源 非必填
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.DataAccess.HttpPage.QuerySql">
            <summary>
            查询的sql语句 必填
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.DataAccess.HttpPage.ReqPage">
            <summary>
            请求查询的页数 必填
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.DataAccess.HttpPage.PageSize">
            <summary>
            每页显示的条数 必填
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.DataAccess.HttpPage.AppCode">
            <summary>
            调用方code 非必填
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.DataAccess.HttpPage.BizCode">
            <summary>
            业务code 非必填
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.HttpPageHelper.GetHttpResponse(System.String)">
            <summary>
            根据URL请求 获取返回的字符
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.HttpPageHelper.JsonData(Com.JinYiWei.Common.DataAccess.HttpPage)">
            <summary>
            返回数据
            </summary>
            <param name="httpPage"></param>
            <returns></returns>
        </member>
        <member name="T:Com.JinYiWei.Common.DataAccess.ResultJsonDataBase">
            <summary>
            响应基类
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.DataAccess.ResultJsonDataBase.Message">
            <summary>
            调用是否成功
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.DataAccess.ResultJsonDataBase.ResultCode">
            <summary>
            返回结果编码
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.DataAccess.ResultJsonDataBase.JsonDataStr">
            <summary>
            调用返回的一些信息提示
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.DataAccess.ResultJsonDataBase.totalCount">
            <summary>
            总条数
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.IBaseService`1.SqlQuery(System.String)">
            <summary>
            根据指定的SQL语句查询符合条件的业务对象实例集合
            </summary>
            <param name="commandText">查询语句</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.IBaseService`1.SqlExec(System.String)">
            <summary>
            执行一条SQL语句
            </summary>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.IBaseService`1.SqlExecList(System.Collections.Generic.IList{System.String})">
            <summary>
            执行一批SQL语句，放在事务里
            </summary>
            <param name="commandList"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.IBaseService`1.SqlQueryNumber(System.String,System.String)">
            <summary>
            根据指定的SQL语句查询出整数结果
            </summary>
            <param name="commandText">查询语句</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.IBaseService`1.SqlQuerySum(System.String)">
            <summary>
            获取数量sum
            </summary>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.IBaseService`1.SqlQuery2C(System.String)">
            <summary>
            根据指定的SQL语句查询符合条件的业务对象实例集合
            </summary>
            <param name="commandText">查询语句</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="T:Com.JinYiWei.Common.DataAccess.IdWorker">
            <summary>
            根据twitter的snowflake算法生成唯一ID
            snowflake算法 64 位
            0---0000000000 0000000000 0000000000 0000000000 0 --- 00000 ---00000 ---000000000000
            第一位为未使用（实际上也可作为long的符号位），接下来的41位为毫秒级时间，然后5位datacenter标识位，5位机器ID（并不算标识符，实际是为线程标识），然后12位该毫秒内的当前毫秒内的计数，加起来刚好64位，为一个Long型。
            其中datacenter标识位起始是机器位，机器ID其实是线程标识，可以同一一个10位来表示不同机器
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.DataAccess.IdWorker.twepoch">
            <summary>
            唯一时间，这是一个避免重复的随机量，自行设定不要大于当前时间戳
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.DataAccess.IdWorker.workerIdBits">
            <summary>
            机器码字节数。4个字节用来保存机器码
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.DataAccess.IdWorker.maxWorkerId">
            <summary>
            最大机器ID
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.DataAccess.IdWorker.sequenceBits">
            <summary>
            计数器字节数，10个字节用来保存计数码
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.DataAccess.IdWorker.workerIdShift">
            <summary>
            机器码数据左移位数，就是后面计数器占用的位数
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.DataAccess.IdWorker.timestampLeftShift">
            <summary>
            时间戳左移动位数就是机器码和计数器总字节数
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.DataAccess.IdWorker.sequenceMask">
            <summary>
            一微秒内可以产生计数，如果达到该值则等到下一微妙在进行生成
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.IdWorker.#ctor(System.Int64,System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="workerId">机器ID</param>
            <param name="datacenterId">数据中心ID</param>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.IdWorker.nextId">
            <summary>
            生成唯一ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.IdWorker.tilNextMillis(System.Int64)">
            <summary>
            获取下一微秒时间戳
            </summary>
            <param name="lastTimestamp"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.IdWorker.timeGen">
            <summary>
            生成当前时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="T:Com.JinYiWei.Common.DataAccess.SingleIdWork">
            <summary>
            获取IDWork实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SingleIdWork.Instance(System.Int64,System.Int64)">
            <summary>
            获取IDWork实例
            </summary>
            <param name="workerId">机器ID</param>
            <param name="datacenterId">数据中心ID</param>
            <returns></returns>
        </member>
        <member name="F:Com.JinYiWei.Common.DataAccess.BaseConst.MinDate">
            <summary>
            系统可接受的最小日期
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlBuider`1.GetOleDBType(System.String)">
            <summary>
            为参数式SQL脚本脚本提供参数数据类型
            </summary>
            <param name="ItemType">业务属性类型名称</param>
            <returns>返回该属性的数据库类型</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlBuider`1.GetMysqlDBType(System.String)">
            <summary>
            为参数式SQL脚本脚本提供参数数据类型
            </summary>
            <param name="ItemType">业务属性类型名称</param>
            <returns>返回该属性的数据库类型</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlBuider`1.SQL_Parameter_Exclude(`0,System.String)">
            <summary>
            使用类结构,生成插入数据库时所使用的脚本参数
            </summary>
            <param name="ExcludeString">排除字段</param>
            <returns>参数类列表</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlBuider`1.SQL_Parameter_Include(`0,System.String)">
            <summary>
            使用类结构,生成插入数据库时所使用的脚本参数
            </summary>
            <param name="IncludeString">包含字段</param>
            <returns>参数类数组</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlBuider`1.SQL_Select">
            <summary>
            获取默认的select语句
            </summary>
            <returns>select语句</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlBuider`1.SQL_Select(System.String)">
            <summary>
            获取带有where条件的select语句
            </summary>
            <param name="where">where条件</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlBuider`1.SQL_Select(System.String,System.String)">
            <summary>
            由业务类返回查询脚本，非参，可运行，查询全部字段
            </summary>
            <param name="TableName">表名</param>
            <param name="IncludString">包含查询字段</param>
            <returns>查询脚本</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlBuider`1.SQL_Select(System.String,System.String,System.String)">
            <summary>
            由业务类返回查询脚本，非参，可运行
            </summary>
            <param name="TableName">表名</param>
            <param name="where">条件字段</param>
            <param name="IncludString">包含查询字段</param>
            <returns>查询脚本</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlBuider`1.SQL_Select_Param(System.String[],System.String)">
            <summary>
            为了配合参数式查询模式，需要先生成带参数型的查询脚本(查询条件只支持and及=)
            </summary>
            <param name="whereName">条件字段，使用数组形式输入</param>
            <param name="ExcludeSelectString">不查询的字段描述（例如："field1,field2"）</param>
            <returns>返回带参数的查询脚本，如select * from table where field1=@field1 and field2=@field2</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlBuider`1.SQL_Update_Exclude(`0,System.String,System.String,System.String)">
            <summary>
            更新数据脚本生成
            </summary>
            <param name="TableName">表名</param>
            <param name="KeyField">条件参数</param>
            <param name="KeyPropInfo">条件属性</param>
            <param name="ExcludeString">排除字段，中间用逗号分隔</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlBuider`1.SQL_Update_Include(`0,System.String,System.String,System.String)">
            <summary>
            更新数据脚本生成
            </summary>
            <param name="TableName">表名</param>
            <param name="KeyField">条件参数</param>
            <param name="KeyPropInfo">条件属性</param>
            <param name="IncludeString">包含字段，中间用逗号分隔</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlBuider`1.SQL_Update_Param_Exclude(System.String,System.String,System.String)">
            <summary>
            生成参数形式的更新脚本，如update table set field1=@field1 where field2=@field2
            调用该方法形成的SQL脚本必须搭配SQL_Parameter生成的参数进行运行
            </summary>
            <param name="TableName">表名</param>
            <param name="KeyField">主键名</param>
            <param name="ExcludeString">不需要更新的字段</param>
            <returns>返回带参数的更新脚本</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlBuider`1.SQL_Update_Param_Include(System.String,System.String,System.String)">
            <summary>
            生成参数形式的更新脚本，如update table set field1=@field1 where field2=@field2
            调用该方法形成的SQL脚本必须搭配SQL_Parameter生成的参数进行运行
            </summary>
            <param name="TableName">表名</param>
            <param name="KeyField">主键名</param>
            <param name="IncludeString">需要更新的字段</param>
            <returns>返回带参数的更新脚本</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlBuider`1.SQL_Insert(`0,System.String,System.String)">
            <summary>
            利用反射生成普通的insert语句，无法防止sql注入
            </summary>
            <param name="TableName">表名</param>
            <param name="IncludeString">排除字段</param>
            <returns>insert语句</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlBuider`1.SQL_Insert_Include(`0,System.String,System.String)">
            <summary>
            由业务对象返回正常的可运行脚本，非参数型
            </summary>
            <param name="TableName">表名</param>
            <param name="IncludeString">包含更新的字段</param>
            <returns>返回可运行得脚本</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlBuider`1.SQL_Insert_Param(System.String,System.String)">
            <summary>
            由业务对象返回带参数的插入脚本，如insert into table(field1) values(@field1)
            </summary>
            <param name="TableName">表名</param>
            <param name="IncludeString">不更新的字段</param>
            <returns>包含参数的插入脚本</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlBuider`1.SQL_Insert_Param_Include(System.String,System.String)">
            <summary>
            由业务对象返回带参数的插入脚本，如insert into table(field1) values(@field1)
            </summary>
            <param name="TableName">表名</param>
            <param name="IncludeString">包含更新的字段</param>
            <returns>包含参数的插入脚本</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlBuider`1.SQL_Delete(`0,System.String,System.String)">
            <summary>
            由业务对象返回可运行得删除脚本，非参数型
            </summary>
            <param name="TableName">表名</param>
            <param name="KeyField">主键</param>
            <param name="KeyPropInfo">主键类型</param>
            <returns>返回删除脚本</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlBuider`1.SQL_Delete_Param(System.String,System.String)">
            <summary>
            返回带参数的删除脚本，如delete from table where field1=@field1
            </summary>
            <param name="TableName">表名</param>
            <param name="KeyField">主键名</param>
            <returns>返回带参数的删除脚本</returns>
        </member>
        <member name="T:Com.JinYiWei.Common.DataAccess.SqlHelper">
            <summary> 
            SqlServer数据访问帮助类 
            </summary> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            将SqlParameter参数数组(参数值)分配给SqlCommand命令. 
            这个方法将给任何一个参数分配DBNull.Value; 
            该操作将阻止默认值的使用. 
            </summary> 
            <param name="command">命令名</param> 
            <param name="commandParameters">SqlParameters数组</param> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary> 
            将DataRow类型的列值分配到SqlParameter参数数组. 
            </summary> 
            <param name="commandParameters">要分配值的SqlParameter参数数组</param> 
            <param name="dataRow">将要分配给存储过程参数的DataRow</param> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary> 
            将一个对象数组分配给SqlParameter参数数组. 
            </summary> 
            <param name="commandParameters">要分配值的SqlParameter参数数组</param> 
            <param name="parameterValues">将要分配给存储过程参数的对象数组</param> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary> 
            预处理用户提供的命令,数据库连接/事务/命令类型/参数 
            </summary> 
            <param name="command">要处理的SqlCommand</param> 
            <param name="connection">数据库连接</param> 
            <param name="transaction">一个有效的事务或者是null值</param> 
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param> 
            <param name="commandText">存储过程名或都T-SQL命令文本</param> 
            <param name="commandParameters">和命令相关联的SqlParameter参数数组,如果没有参数为'null'</param> 
            <param name="mustCloseConnection"><c>true</c> 如果连接是打开的,则为true,其它情况下为false.</param> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.GetConnSting">
            <summary> 
            一个有效的数据库连接字符串 
            </summary> 
            <returns></returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.GetConnection">
            <summary> 
            一个有效的数据库连接对象 
            </summary> 
            <returns></returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary> 
            此方法用于执行不返回任何行或值的命令。这些命令通常用于执行数据库更新，但也可用于返回存储过程的输出参数。
            执行指定连接字符串,类型的SqlCommand. 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders"); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param> 
            <param name="commandText">存储过程名称或SQL语句</param> 
            <returns>返回命令影响的行数</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定连接字符串,类型的SqlCommand.如果没有提供参数,不返回结果. 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param> 
            <param name="commandText">存储过程名称或SQL语句</param> 
            <param name="commandParameters">SqlParameter参数数组</param> 
            <returns>返回命令影响的行数</returns> 
        </member>
        <!-- 对于成员“M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])”忽略有格式错误的 XML 注释 -->
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的命令 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接对象的命令 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param> 
            <param name="commandText">T存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">SqlParamter参数数组</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接对象的命令,将对象数组的值赋给存储过程参数. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值 
            示例:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <!-- 对于成员“M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行带事务的SqlCommand(指定参数). 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">SqlParamter参数数组</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary> 
            执行带事务的SqlCommand(指定参数值). 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值 
            示例:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回受影响的行数</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接字符串的命令,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接字符串的命令,返回DataSet. 
            </summary> 
            <remarks> 
            示例: 
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">SqlParamters参数数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接字符串的命令,直接提供参数值,返回DataSet. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值. 
            示例: 
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的命令,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接对象的命令,指定存储过程参数,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <param name="commandParameters">SqlParamter参数数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接对象的命令,指定参数值,返回DataSet. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输入参数和返回值. 
            示例.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary> 
            执行指定事务的命令,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="transaction">事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定事务的命令,指定参数,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <param name="commandParameters">SqlParamter参数数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary> 
            执行指定事务的命令,指定参数值,返回DataSet. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输入参数和返回值. 
            示例.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36); 
            </remarks> 
            <param name="transaction">事务</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="T:Com.JinYiWei.Common.DataAccess.SqlHelper.SqlConnectionOwnership">
            <summary> 
            枚举,标识数据库连接是由SqlHelper提供还是由调用者提供 
            </summary> 
        </member>
        <member name="F:Com.JinYiWei.Common.DataAccess.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>由SqlHelper提供连接</summary> 
        </member>
        <member name="F:Com.JinYiWei.Common.DataAccess.SqlHelper.SqlConnectionOwnership.External">
            <summary>由调用者提供连接</summary> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],Com.JinYiWei.Common.DataAccess.SqlHelper.SqlConnectionOwnership)">
            <summary> 
            执行指定数据库连接对象的数据阅读器. 
            </summary> 
            <remarks> 
            如果是SqlHelper打开连接,当连接关闭DataReader也将关闭. 
            如果是调用都打开连接,DataReader由调用都管理. 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="transaction">一个有效的事务,或者为 'null'</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <param name="commandParameters">SqlParameters参数数组,如果没有参数则为'null'</param> 
            <param name="connectionOwnership">标识数据库连接对象是由调用者提供还是由SqlHelper提供</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接字符串的数据阅读器. 
            </summary> 
            <remarks> 
            示例:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接字符串的数据阅读器,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <param name="commandParameters">SqlParamter参数数组(new SqlParameter("@prodid", 24))</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接字符串的数据阅读器,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            示例:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的数据阅读器. 
            </summary> 
            <remarks> 
            示例:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            [调用者方式]执行指定数据库连接对象的数据阅读器,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandParameters">SqlParamter参数数组</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary> 
            [调用者方式]执行指定数据库连接对象的数据阅读器,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            示例:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">T存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary> 
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数值. 
            </summary> 
            <remarks> 
            示例:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数. 
            </summary> 
            <remarks> 
            示例:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary> 
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接字符串的命令,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接字符串的命令,指定参数,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接字符串的命令,指定参数值,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的命令,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接对象的命令,指定参数值,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库事务的命令,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount"); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库事务的命令,指定参数,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary> 
            执行指定数据库事务的命令,指定参数值,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的SqlCommand命令,并产生一个XmlReader对象做为结果集返回. 
            </summary> 
            <remarks> 
            示例:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接对象的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接对象的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称 using "FOR XML AUTO"</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库事务的SqlCommand命令,并产生一个XmlReader对象做为结果集返回. 
            </summary> 
            <remarks> 
            示例:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库事务的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary> 
            执行指定数据库事务的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回一个包含结果集的DataSet.</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary> 
            执行指定数据库连接字符串的命令,映射数据表并填充数据集. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.)</param> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接字符串的命令,映射数据表并填充数据集.指定命令参数. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary> 
            执行指定数据库连接字符串的命令,映射数据表并填充数据集,指定存储过程参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param>    
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary> 
            执行指定数据库连接对象的命令,映射数据表并填充数据集. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param>    
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接对象的命令,映射数据表并填充数据集,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary> 
            执行指定数据库连接对象的命令,映射数据表并填充数据集,指定存储过程参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary> 
            执行指定数据库事务的命令,映射数据表并填充数据集. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库事务的命令,映射数据表并填充数据集,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary> 
            执行指定数据库事务的命令,映射数据表并填充数据集,指定存储过程参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary> 
            [私有方法][内部调用]执行指定数据库连接对象/事务的命令,映射数据表并填充数据集,DataSet/TableNames/SqlParameters. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary> 
            执行数据集更新到数据库,指定inserted, updated, or deleted命令. 
            </summary> 
            <remarks> 
            示例:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order"); 
            </remarks> 
            <param name="insertCommand">[追加记录]一个有效的T-SQL语句或存储过程</param> 
            <param name="deleteCommand">[删除记录]一个有效的T-SQL语句或存储过程</param> 
            <param name="updateCommand">[更新记录]一个有效的T-SQL语句或存储过程</param> 
            <param name="dataSet">要更新到数据库的DataSet</param> 
            <param name="tableName">要更新到数据库的DataTable</param> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary> 
            创建SqlCommand命令,指定数据库连接对象,存储过程名和参数. 
            </summary> 
            <remarks> 
            示例:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="sourceColumns">源表的列名称数组</param> 
            <returns>返回SqlCommand命令</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回受影响的行数. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回受影响的行数. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事物的存储过程,使用DataRow做为参数值,返回受影响的行数. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataSet. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回一个包含结果集的DataSet.</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataSet. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回一个包含结果集的DataSet.</returns> 
            
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回DataSet. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回一个包含结果集的DataSet.</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataReader. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataReader. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事物的存储过程,使用DataRow做为参数值,返回DataReader. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回XmlReader类型的结果集. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回XmlReader类型的结果集. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="T:Com.JinYiWei.Common.DataAccess.SqlHelperParameterCache">
            <summary> 
            SqlHelperParameterCache提供缓存存储过程参数,并能够在运行时从存储过程中探索参数. 
            </summary> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary> 
            探索运行时的存储过程,返回SqlParameter参数数组. 
            初始化参数值为 DBNull.Value. 
            </summary> 
            <param name="connection">一个有效的数据库连接</param> 
            <param name="spName">存储过程名称</param> 
            <param name="includeReturnValueParameter">是否包含返回值参数</param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary> 
            SqlParameter参数数组的深层拷贝. 
            </summary> 
            <param name="originalParameters">原始参数数组</param> 
            <returns>返回一个同样的参数数组</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            追加参数数组到缓存. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandText">存储过程名或SQL语句</param> 
            <param name="commandParameters">要缓存的参数数组</param> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary> 
            从缓存中获取参数数组. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符</param> 
            <param name="commandText">存储过程名或SQL语句</param> 
            <returns>参数数组</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary> 
            返回指定的存储过程的参数集 
            </summary> 
            <remarks> 
            这个方法将查询数据库,并将信息存储到缓存. 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符</param> 
            <param name="spName">存储过程名</param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary> 
            返回指定的存储过程的参数集 
            </summary> 
            <remarks> 
            这个方法将查询数据库,并将信息存储到缓存. 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符.</param> 
            <param name="spName">存储过程名</param> 
            <param name="includeReturnValueParameter">是否包含返回值参数</param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary> 
            [内部]返回指定的存储过程的参数集(使用连接对象). 
            </summary> 
            <remarks> 
            这个方法将查询数据库,并将信息存储到缓存. 
            </remarks> 
            <param name="connection">一个有效的数据库连接字符</param> 
            <param name="spName">存储过程名</param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary> 
            [内部]返回指定的存储过程的参数集(使用连接对象) 
            </summary> 
            <remarks> 
            这个方法将查询数据库,并将信息存储到缓存. 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="includeReturnValueParameter"> 
            是否包含返回值参数 
            </param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="M:Com.JinYiWei.Common.DataAccess.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary> 
            [私有]返回指定的存储过程的参数集(使用连接对象) 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="includeReturnValueParameter">是否包含返回值参数</param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="T:Com.JinYiWei.Common.Data.AnyRadixConvert">
            <summary>
            任意[2,62]进制转换器
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.AnyRadixConvert.X2H(System.String,System.Int32)">
            <summary>
            将指定基数的数字的字符串表示形式转换为等效的64位有符号整数
            </summary>
            <param name="value">指定基数的数字的字符串表示</param>
            <param name="fromRadix">字符串的基数，必须为[2,62]范围内</param>
            <returns>等效于value的数值的64位有符号整数</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.AnyRadixConvert.H2X(System.UInt64,System.Int32)">
            <summary>
            将64位有符号整数形式的数值转换为指定基数的数值的字符串形式
            </summary>
            <param name="value">64位有符号整数形式的数值</param>
            <param name="toRadix">要转换的目标基数，必须为[2,62]范围内</param>
            <returns>指定基数的数值的字符串形式</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.AnyRadixConvert.X2X(System.String,System.Int32,System.Int32)">
            <summary>
            任意进制转换，将源进制表示的value转换为目标进制，进制的字母顺序为先大写后小写
            </summary>
            <param name="value">要转换的数据</param>
            <param name="fromRadix">源进制数，必须为[2,62]范围内</param>
            <param name="toRadix">目标进制数，必须为[2,62]范围内</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.AnyRadixConvert._10To16(System.Int32)">
            <summary>
            10进制数字转换为16进制字符串
            </summary>
            <param name="value">10进制数</param>
            <returns>16进制数的字符串</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.AnyRadixConvert._16To10(System.String)">
            <summary>
            16进制字符串转换为10进制数字
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Data.CombHelper">
            <summary>
            COMB（<see cref="T:System.Guid"/>与<see cref="T:System.DateTime"/>混合构成的可排序<see cref="T:System.Guid"/>）类型操作类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.CombHelper.NewComb">
            <summary>
            返回Guid用于数据库操作，特定的时间代码可以提高检索效率
            </summary>
            <returns>COMB类型 Guid 数据</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.CombHelper.GetDateFromComb(System.Guid)">
            <summary>
            从SQL Server 返回的Guid中生成时间信息
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Data.CommonResult`1">
            <summary>
            结果基类
            </summary>
            <typeparam name="TResultType"></typeparam>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.CommonResult`1.#ctor">
            <summary>
            初始化一个<see cref="!:OSharpResult&lt;TResultType&gt;"/>类型的新实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.CommonResult`1.#ctor(`0)">
            <summary>
            初始化一个<see cref="!:OSharpResult&lt;TResultType&gt;"/>类型的新实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.CommonResult`1.#ctor(`0,System.String)">
            <summary>
            初始化一个<see cref="!:OSharpResult&lt;TResultType&gt;"/>类型的新实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.CommonResult`1.#ctor(`0,System.String,System.Object)">
            <summary>
            初始化一个<see cref="!:OSharpResult&lt;TResultType&gt;"/>类型的新实例
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Data.CommonResult`2">
            <summary>
            结果基类
            </summary>
            <typeparam name="TResultType">结果类型</typeparam>
            <typeparam name="TData">结果数据类型</typeparam>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.CommonResult`2.#ctor">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Data.CommonResult`2"/>类型的新实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.CommonResult`2.#ctor(`0)">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Data.CommonResult`2"/>类型的新实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.CommonResult`2.#ctor(`0,System.String)">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Data.CommonResult`2"/>类型的新实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.CommonResult`2.#ctor(`0,System.String,`1)">
            <summary>
            初始化一个<see cref="!:OSharpResult&lt;TResultType,TData&gt;"/>类型的新实例
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.CommonResult`2.ResultType">
            <summary>
            返回的结果类型 0：成功；1：失败；2：系统异常；3：无权限
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.CommonResult`2.Message">
            <summary>
            返回的具体消息
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.CommonResult`2.Data">
            <summary>
            返回的结果数据
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Data.CommonResultType">
            <summary>
            结果类型 0：成功；1：失败；2：系统异常；3：无权限
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Data.CommonResultType.Success">
            <summary>
            成功结果类型
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Data.CommonResultType.Failed">
            <summary>
            消息结果类型
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Data.CommonResultType.Error">
            <summary>
            异常结果类型
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Data.CommonResultType.NoAuth">
            <summary>
            权限结果类型
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Data.Compression">
            <summary>
            压缩操作类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.Compression.Compress(System.Byte[])">
            <summary>
            对byte数组进行压缩
            </summary>
            <param name="data">待压缩的byte数组</param>
            <returns>压缩后的byte数组</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.Compression.Decompress(System.Byte[])">
            <summary>
            对byte[]数组进行解压
            </summary>
            <param name="data">待解压的byte数组</param>
            <returns>解压后的byte数组</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.Compression.Compress(System.String)">
            <summary>
            对字符串进行压缩
            </summary>
            <param name="value">待压缩的字符串</param>
            <returns>压缩后的字符串</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.Compression.Decompress(System.String)">
            <summary>
            对字符串进行解压
            </summary>
            <param name="value">待解压的字符串</param>
            <returns>解压后的字符串</returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Data.DateTimeRange">
            <summary>
            表示一个时间范围
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.DateTimeRange.#ctor">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Data.DateTimeRange"/>类型的新实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.DateTimeRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Data.DateTimeRange"/>类型的新实例
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.DateTimeRange.StartTime">
            <summary>
            获取或设置 起始时间
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.DateTimeRange.EndTime">
            <summary>
            获取或设置 结束时间
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.DateTimeRange.Yesterday">
            <summary>
            获取 昨天的时间范围
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.DateTimeRange.Today">
            <summary>
            获取 今天的时间范围
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.DateTimeRange.Tomorrow">
            <summary>
            获取 明天的时间范围
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.DateTimeRange.LastWeek">
            <summary>
            获取 上周的时间范围
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.DateTimeRange.ThisWeek">
            <summary>
            获取 本周的时间范围
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.DateTimeRange.NextWeek">
            <summary>
            获取 下周的时间范围
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.DateTimeRange.LastMonth">
            <summary>
            获取 上个月的时间范围
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.DateTimeRange.ThisMonth">
            <summary>
            获取 本月的时间范围
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.DateTimeRange.NextMonth">
            <summary>
            获取 下个月的时间范围
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.DateTimeRange.LastYear">
            <summary>
            获取 上一年的时间范围
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.DateTimeRange.ThisYear">
            <summary>
            获取 本年的时间范围
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.DateTimeRange.NextYear">
            <summary>
            获取 下一年的时间范围
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.DateTimeRange.Last30Days">
            <summary>
            获取 过去30天的时间范围
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.DateTimeRange.Last7Days">
            <summary>
            获取 过去7天的时间范围
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.DateTimeRange.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            <see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Data.ICommonResult`1">
            <summary>
            操作结果
            </summary>
            <typeparam name="TResultType"></typeparam>
        </member>
        <member name="T:Com.JinYiWei.Common.Data.ICommonResult`2">
            <summary>
            OSharp操作结果
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.ICommonResult`2.ResultType">
            <summary>
            获取或设置 结果类型
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.ICommonResult`2.Message">
            <summary>
            获取或设置 返回消息
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.ICommonResult`2.Data">
            <summary>
            获取或设置 结果数据
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Data.JsonHelper">
            <summary>
            JSON辅助操作类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.JsonHelper.JsonDateTimeFormat(System.String)">
            <summary>
            处理Json的时间格式为正常格式
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.JsonHelper.ToJson(System.Object)">
            <summary>
            把对象序列化成Json字符串格式
            </summary>
            <param name="object">Json 对象</param>
            <returns>Json 字符串</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.JsonHelper.ToJsonIgnoreNull(System.Object)">
            <summary>
            把对象序列化成Json字符串格式，空值不进行序列化
            </summary>
            <param name="object">Json 对象</param>
            <returns>Json 字符串</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.JsonHelper.ToJsonInclude(System.Object,System.String[])">
            <summary>
            只序列化数组里面的字段
            </summary>
            <param name="@object"></param>
            <param name="include"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.JsonHelper.FromJson``1(System.String)">
            <summary>
            把Json字符串转换为强类型对象
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.LimitPropsContractResolver.#ctor(System.String[],System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="props">传入的属性数组</param>
            <param name="retain">true:表示props是需要保留的字段  false：表示props是要排除的字段</param>
        </member>
        <member name="T:Com.JinYiWei.Common.Data.OperationResult">
            <summary>
            业务操作结果信息类，对操作结果进行封装
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.OperationResult.#ctor">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Data.OperationResult"/>类型的新实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.OperationResult.#ctor(Com.JinYiWei.Common.Data.OperationResultType)">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Data.OperationResult"/>类型的新实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.OperationResult.#ctor(Com.JinYiWei.Common.Data.OperationResultType,System.String)">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Data.OperationResult"/>类型的新实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.OperationResult.#ctor(Com.JinYiWei.Common.Data.OperationResultType,System.String,System.Object)">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Data.OperationResult"/>类型的新实例
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.OperationResult.Success">
            <summary>
            获取或设置 成功的操作结果
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.OperationResult.NoChanged">
            <summary>
            获取或设置 未变更的操作结果
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Data.OperationResult`1">
            <summary>
            泛型版本的业务操作结果信息类，对操作结果进行封装
            </summary>
            <typeparam name="TData">返回数据的类型</typeparam>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.OperationResult`1.#ctor">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Data.OperationResult"/>类型的新实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.OperationResult`1.#ctor(Com.JinYiWei.Common.Data.OperationResultType)">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Data.OperationResult`1"/>类型的新实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.OperationResult`1.#ctor(Com.JinYiWei.Common.Data.OperationResultType,System.String)">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Data.OperationResult`1"/>类型的新实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.OperationResult`1.#ctor(Com.JinYiWei.Common.Data.OperationResultType,System.String,`0)">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Data.OperationResult`1"/>类型的新实例
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.OperationResult`1.Successed">
            <summary>
            获取 是否成功
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Data.OperationResultType">
            <summary>
            表示业务操作结果的枚举
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Data.OperationResultType.ValidError">
            <summary>
              输入信息验证失败
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Data.OperationResultType.QueryNull">
            <summary>
              指定参数的数据不存在
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Data.OperationResultType.NoChanged">
            <summary>
              操作取消或操作没引发任何变化
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Data.OperationResultType.Success">
            <summary>
              操作成功
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Data.OperationResultType.Error">
            <summary>
              操作引发错误
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Data.PageCondition">
            <summary>
            分页查询条件信息
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.PageCondition.#ctor">
            <summary>
            初始化一个 默认参数（第1页，每页20，排序条件为空）的分页查询条件信息类 的新实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.PageCondition.#ctor(System.Int32,System.Int32)">
            <summary>
            初始化一个 指定页索引与页大小的分页查询条件信息类 的新实例
            </summary>
            <param name="pageIndex"> 页索引 </param>
            <param name="pageSize"> 页大小 </param>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.PageCondition.PageIndex">
            <summary>
            获取或设置 页索引
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.PageCondition.PageSize">
            <summary>
            获取或设置 页大小
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.PageCondition.SortConditions">
            <summary>
            获取或设置 排序条件组
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.PageParameters.Table">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.PageParameters.Field">
            <summary>
            读取字段
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.PageParameters.Where">
            <summary>
            Where条件
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.PageParameters.GroupBy">
            <summary>
            分组
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.PageParameters.OrderBy">
            <summary>
            排序字段
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.PageParameters.PrimaryKeyField">
            <summary>
            主键必需
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.PageParameters.PageNumber">
            <summary>
            开始页码
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.PageParameters.PageSize">
            <summary>
            页大小
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.PageParameters.IsCount">
            <summary>
            是否返回记录总数
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Data.Pages`1">
            <summary>
            分页数据格式
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.Pages`1.PageSize">
            <summary>
            每页多少数据
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.Pages`1.PageNum">
            <summary>
            第几页
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.Pages`1.PageTotals">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.Pages`1.PageDatas">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Data.SerializeHelper">
            <summary>
            序列化辅助操作类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.SerializeHelper.ToBinary(System.Object)">
            <summary>
            将数据序列化为二进制数组
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.SerializeHelper.FromBinary``1(System.Byte[])">
            <summary>
            将二进制数组反序列化为强类型数据
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.SerializeHelper.ToBinaryFile(System.Object,System.String)">
            <summary>
            将数据序列化为二进制数组并写入文件中
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.SerializeHelper.FromBinaryFile``1(System.String)">
            <summary>
            将指定二进制数据文件还原为强类型数据
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.SerializeHelper.ToXml(System.Object)">
            <summary>
            将数据序列化为XML形式
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.SerializeHelper.FromXml``1(System.String)">
            <summary>
            将XML数据反序列化为强类型
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.SerializeHelper.ToXmlFile(System.Object,System.String)">
            <summary>
            将数据序列化为XML并写入文件
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.SerializeHelper.FromXmlFile``1(System.String)">
            <summary>
            将指定XML数据文件还原为强类型数据
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Data.Singleton`1">
            <summary>
            定义一个指定类型的单例，该实例的生命周期将跟随整个应用程序。
            </summary>
            <typeparam name="T">要创建单例的类型。</typeparam>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.Singleton`1.Instance">
            <summary>
            获取指定类型的单例实例
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Data.Singleton">
            <summary>
            提供一个字典容器，按类型装载所有<see cref="T:Com.JinYiWei.Common.Data.Singleton`1"/>的单例实例
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.Singleton.AllSingletons">
            <summary>
            获取 单例对象字典
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Data.SingletonDictionary`2">
            <summary>
            创建一个单例字典，该实例的生命周期将跟随整个应用程序
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.SingletonDictionary`2.Instance">
            <summary>
            获取指定类型的字典的单例实例
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Data.SingletonList`1">
            <summary>
            创建一个类型列表的单例，该实例的生命周期将跟随整个应用程序
            </summary>
            <typeparam name="T">要创建的列表元素的类型</typeparam>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.SingletonList`1.Instance">
            <summary>
            获取指定类型的列表的单例实例
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Data.SortCondition">
            <summary>
            列表字段排序条件
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.SortCondition.#ctor(System.String)">
            <summary>
            构造一个指定字段名称的升序排序的排序条件
            </summary>
            <param name="sortField">字段名称</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.SortCondition.#ctor(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            构造一个排序字段名称和排序方式的排序条件
            </summary>
            <param name="sortField">字段名称</param>
            <param name="listSortDirection">排序方式</param>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.SortCondition.SortField">
            <summary>
            获取或设置 排序字段名称
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Data.SortCondition.ListSortDirection">
            <summary>
            获取或设置 排序方向
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Data.SortCondition`1">
            <summary>
            支持泛型的列表字段排序条件
            </summary>
            <typeparam name="T">列表元素类型</typeparam>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.SortCondition`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            使用排序字段 初始化一个<see cref="T:Com.JinYiWei.Common.Data.SortCondition"/>类型的新实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.SortCondition`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.ComponentModel.ListSortDirection)">
            <summary>
            使用排序字段与排序方式 初始化一个<see cref="T:Com.JinYiWei.Common.Data.SortCondition"/>类型的新实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Data.SortCondition`1.GetPropertyName(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            从泛型委托获取属性名
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.DDTaxi.DDHelper.RequestOrderAgain(System.String,System.String)">
            <summary>
            重新叫车
            </summary>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DDTaxi.DDHelper.CancelOrder(System.String,System.Boolean)">
            <summary>
            取消订单
            </summary>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DDTaxi.DDHelper.GetPrice(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.String,System.Int32,System.Int32)">
            <summary>
            获取用户信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DDTaxi.DDHelper.NewGetPrice(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.String,System.Int32,System.Int32,System.Int32,System.Nullable{System.DateTime})">
            <summary>
            获取用户信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DDTaxi.DDHelper.GetUserInfo">
            <summary>
            获取用户信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DDTaxi.DDHelper.GetHistoryOrder(System.String,System.String,System.String,System.String)">
            <summary>
            获取历史订单
            </summary>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DDTaxi.DDHelper.GetAddress(System.String,System.String)">
            <summary>
            获取地址联想
            </summary>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DDTaxi.DDHelper.GetOrderDetail(System.String)">
            <summary>
            获取订单详情
            </summary>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DDTaxi.DDHelper.RequestOrder(System.Int32,System.Int32,System.Decimal,System.Decimal,System.String,System.Decimal,System.Decimal,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Nullable{System.DateTime})">
            <summary>
            用户根据需要发起叫车请求
            </summary>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DDTaxi.DDHelper.GetOrderId">
            <summary>
            获取叫车请求id，没有id无法叫车
            </summary>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DDTaxi.DDHelper.GetCityCar">
            <summary>
            获取城市车型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DDTaxi.DDHelper.GetFullURL(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            拼接URL
            </summary>
            <param name="url"></param>
            <param name="requestParams"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DDTaxi.IDDCacheToKenService.GetToken(System.String)">
            <summary>
            get token
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="T:Com.JinYiWei.Common.DDTaxi.JsonResult`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Com.JinYiWei.Common.DDTaxi.Order">
            <summary>
            订单对象
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.DDTaxi.Combo">
            <summary>
            套餐对象
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.DDTaxi.Price">
            <summary>
            价格对象
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Dependency.ServiceProviderExtensions">
            <summary>
            服务提供者扩展辅助操作
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Dependency.ServiceProviderExtensions.GetService``1(System.IServiceProvider)">
            <summary>
            获取指定类型服务的实例
            </summary>
            <typeparam name="T">要获取实例的服务类型</typeparam>
            <param name="provider">服务提供者</param>
            <returns>指定类型的实例</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Dependency.ServiceProviderExtensions.GetRequiredService(System.IServiceProvider,System.Type)">
            <summary>
            获取指定类型服务的非空实例
            </summary>
            <param name="provider">服务提供者</param>
            <param name="serviceType">要获取实例的服务类型</param>
            <returns>指定类型的非空实例</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Dependency.ServiceProviderExtensions.GetRequiredService``1(System.IServiceProvider)">
            <summary>
            获取指定类型服务的非空实例
            </summary>
            <typeparam name="T">要获取实例的服务类型</typeparam>
            <param name="provider">服务提供者</param>
            <returns>指定类型的非空实例</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Dependency.ServiceProviderExtensions.GetServices``1(System.IServiceProvider)">
            <summary>
            获取指定类型服务的所有实例
            </summary>
            <typeparam name="T">要获取实例的服务类型</typeparam>
            <param name="provider">服务提供者</param>
            <returns>指定类型的所有实例</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Dependency.ServiceProviderExtensions.GetServices(System.IServiceProvider,System.Type)">
            <summary>
            获取指定类型服务的所有实例
            </summary>
            <param name="provider">服务提供者</param>
            <param name="serviceType">要获取实例的服务类型</param>
            <returns>指定类型的所有实例</returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Develop.CodeRamer">
            <summary>
            代码性能测试内存计算工具
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Develop.CodeRamer.Initialize">
            <summary>
            内存计算初始化，同时后续操作进行预热，以避免初次操作带来的性能影响
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Develop.CodeRamer.Ram(System.String,System.Action)">
            <summary>
            内存计算，传入操作标识名，重复次数，操作过程获取操作的性能数据
            </summary>
            <param name="name"> 操作标识名 </param>
            <param name="action"> 操作过程的Action </param>
        </member>
        <member name="T:Com.JinYiWei.Common.Develop.CodeTimer">
            <summary>
            代码性能测试计时器（来自博客园-老赵）
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Develop.CodeTimer.GetCycleCount">
            <summary>
            获取当前CPU循环次数
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Develop.CodeTimer.Initialize">
            <summary>
            计时器初始化 对计时器进行初始化操作，同时对后续操作进行预热，以避免初次操作带来的性能影响
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Develop.CodeTimer.Time(System.String,System.Int32,System.Action)">
            <summary>
            计时器，传入操作标识名，重复次数，操作过程获取操作的性能数据
            </summary>
            <param name="name"> 操作标识名 </param>
            <param name="iteration"> 重复次数 </param>
            <param name="action"> 操作过程的Action </param>
        </member>
        <member name="M:Com.JinYiWei.Common.DHSTSSM.DHSTSSM.SubmitVerifyCode(System.String,System.String)">
            <summary>
            验证码发送
            </summary>
            <param name="phones">手机号</param>
            <param name="content">发送的验证码内容</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DHSTSSM.DHSTSSM.Submit(System.String,System.String)">
            <summary>
            营销短信发送,多个号码用，隔开，适用于不同号码但短信内容一样
            </summary>
            <param name="phones">手机号</param>
            <param name="content">发送的内容</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DHSTSSM.DHSTSSM.BatchSubmit(System.Collections.Generic.IEnumerable{Com.JinYiWei.Common.DHSTSSM.BatchTemp})">
            <summary>
            批量短信群发，适用于短信号码跟内容都不一样的
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.DHSTSSM.DHSTSSM.GetToken">
            <summary>
            获取token
            </summary>
            <returns></returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Disposable">
            <summary>
            用于实现<see cref="T:System.IDisposable"/>接口，表示当前类型是可释放的
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Disposable.Dispose">
            <summary>
            释放对象，用于外部调用
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Disposable.Finalize">
            <summary>
            释放当前对象时释放资源
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Disposable.Dispose(System.Boolean)">
            <summary>
            重写以实现释放对象的逻辑
            </summary>
            <param name="disposing">是否要释放对象</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Disposable.Disposing">
            <summary>
            重写以实现释放派生类资源的逻辑
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Excel.NPOIHelper">
            <summary>
            导出Excel
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Excel.NPOIHelper.ExportDT(System.Data.DataTable,System.String)">
            <summary>
            DataTable导出到Excel的MemoryStream
            </summary>
            <param name="dtSource">源DataTable</param>
            <param name="strHeaderText">表头文本</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Excel.NPOIHelper.ExportDTI(System.Data.DataTable,System.String,System.IO.FileStream)">
            <summary>
            DataTable导出到Excel的MemoryStream
            </summary>
            <param name="dtSource">源DataTable</param>
            <param name="strHeaderText">表头文本</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Excel.NPOIHelper.ExportDTtoExcel(System.Data.DataTable,System.String,System.String)">
            <summary>
            DataTable导出到Excel文件
            </summary>
            <param name="dtSource">源DataTable</param>
            <param name="strHeaderText">表头文本</param>
            <param name="strFileName">保存位置</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Excel.NPOIHelper.ImportExceltoDt(System.String)">
            <summary>
            读取excel 默认第一行为标头
            </summary>
            <param name="strFileName">excel文档路径</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Excel.NPOIHelper.ImportExceltoDt(System.IO.Stream)">
            <summary>
            读取Excel流到DataTable
            </summary>
            <param name="stream">Excel流</param>
            <returns>第一个sheet中的数据</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Excel.NPOIHelper.ImportExceltoDt(System.IO.Stream,System.String,System.Int32)">
            <summary>
            读取Excel流到DataTable
            </summary>
            <param name="stream">Excel流</param>
            <param name="sheetName">表单名</param>
            <param name="HeaderRowIndex">列头所在行号，-1表示没有列头</param>
            <returns>指定sheet中的数据</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Excel.NPOIHelper.ImportExceltoDs(System.IO.Stream)">
            <summary>
            读取Excel流到DataSet
            </summary>
            <param name="stream">Excel流</param>
            <returns>Excel中的数据</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Excel.NPOIHelper.ImportExceltoDs(System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            读取Excel流到DataSet
            </summary>
            <param name="stream">Excel流</param>
            <param name="dict">字典参数，key：sheet名，value：列头所在行号，-1表示没有列头</param>
            <returns>Excel中的数据</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Excel.NPOIHelper.ImportExceltoDt(System.String,System.String,System.Int32)">
            <summary>
            读取excel
            </summary>
            <param name="strFileName">excel文件路径</param>
            <param name="sheet">需要导出的sheet</param>
            <param name="HeaderRowIndex">列头所在行号，-1表示没有列头</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Excel.NPOIHelper.ImportExceltoDt(System.String,System.Int32,System.Int32)">
            <summary>
            读取excel
            </summary>
            <param name="strFileName">excel文件路径</param>
            <param name="sheet">需要导出的sheet序号</param>
            <param name="HeaderRowIndex">列头所在行号，-1表示没有列头</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Excel.NPOIHelper.ImportExceltoDt(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            读取excel
            </summary>
            <param name="strFileName">excel文件路径</param>
            <param name="sheet">需要导出的sheet</param>
            <param name="HeaderRowIndex">列头所在行号，-1表示没有列头</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Excel.NPOIHelper.ImportExceltoDt(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            读取excel
            </summary>
            <param name="strFileName">excel文件路径</param>
            <param name="sheet">需要导出的sheet序号</param>
            <param name="HeaderRowIndex">列头所在行号，-1表示没有列头</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Excel.NPOIHelper.ImportDt(NPOI.SS.UserModel.ISheet,System.Int32,System.Boolean)">
            <summary>
            将制定sheet中的数据导出到datatable中
            </summary>
            <param name="sheet">需要导出的sheet</param>
            <param name="HeaderRowIndex">列头所在行号，-1表示没有列头</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Excel.NPOIHelper.UpdateExcel(System.String,System.String,System.String[],System.Int32,System.Int32)">
            <summary>
            更新Excel表格
            </summary>
            <param name="outputFile">需更新的excel表格路径</param>
            <param name="sheetname">sheet名</param>
            <param name="updateData">需更新的数据</param>
            <param name="coluid">需更新的列号</param>
            <param name="rowid">需更新的开始行号</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Excel.NPOIHelper.UpdateExcel(System.String,System.String,System.String[][],System.Int32[],System.Int32)">
            <summary>
            更新Excel表格
            </summary>
            <param name="outputFile">需更新的excel表格路径</param>
            <param name="sheetname">sheet名</param>
            <param name="updateData">需更新的数据</param>
            <param name="coluids">需更新的列号</param>
            <param name="rowid">需更新的开始行号</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Excel.NPOIHelper.UpdateExcel(System.String,System.String,System.Double[],System.Int32,System.Int32)">
            <summary>
            更新Excel表格
            </summary>
            <param name="outputFile">需更新的excel表格路径</param>
            <param name="sheetname">sheet名</param>
            <param name="updateData">需更新的数据</param>
            <param name="coluid">需更新的列号</param>
            <param name="rowid">需更新的开始行号</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Excel.NPOIHelper.UpdateExcel(System.String,System.String,System.Double[][],System.Int32[],System.Int32)">
            <summary>
            更新Excel表格
            </summary>
            <param name="outputFile">需更新的excel表格路径</param>
            <param name="sheetname">sheet名</param>
            <param name="updateData">需更新的数据</param>
            <param name="coluids">需更新的列号</param>
            <param name="rowid">需更新的开始行号</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Excel.NPOIHelper.ExportByWeb(System.Data.DataTable,System.String,System.String)">
            <summary>
            用于Web导出                                                                                             第一步
            </summary>
            <param name="dtSource">源DataTable</param>
            <param name="strHeaderText">表头文本</param>
            <param name="strFileName">文件名</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Excel.NPOIHelper.Export(System.Data.DataTable,System.String)">
            <summary>
            DataTable导出到Excel的MemoryStream                                                                      第二步
            </summary>
            <param name="dtSource">源DataTable</param>
            <param name="strHeaderText">表头文本</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Excel.NPOIHelper.ExportByWeb(System.Data.DataSet,System.String,System.String)">
            <summary>
            /注：分浏览器进行编码（IE必须编码，FireFox不能编码，Chrome可编码也可不编码）
            </summary>
            <param name="ds"></param>
            <param name="strHeaderText"></param>
            <param name="strFileName"></param>
        </member>
        <member name="M:Com.JinYiWei.Common.Excel.NPOIHelper.ExportDataSetToExcel(System.Data.DataSet,System.String)">
            <summary>
            由DataSet导出Excel
            </summary>
            <param name="sourceTable">要导出数据的DataTable</param>
            <param name="sheetName">工作表名称</param>
            <returns>Excel工作表</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Excel.NPOIHelper.HasData(System.IO.Stream)">
            <summary>
            验证导入的Excel是否有数据
            </summary>
            <param name="excelFileStream"></param>
            <returns></returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Exceptions.CommonException">
            <summary>
            通用异常类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Exceptions.CommonException.#ctor">
            <summary>
            初始化<see cref="!:OSharpException"/>类的新实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Exceptions.CommonException.#ctor(System.String)">
            <summary>
            使用指定错误消息初始化<see cref="!:OSharpException"/>类的新实例。
            </summary>
            <param name="message">描述错误的消息</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Exceptions.CommonException.#ctor(System.String,System.Exception)">
            <summary>
            使用异常消息与一个内部异常实例化一个<see cref="!:OSharpException"/>类的新实例
            </summary>
            <param name="message">异常消息</param>
            <param name="inner">用于封装在<see cref="!:OSharpException"/>内部的异常实例</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Exceptions.CommonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用可序列化数据实例化一个<see cref="!:OSharpException"/>类的新实例
            </summary>
            <param name="info">保存序列化对象数据的对象。</param>
            <param name="context">有关源或目标的上下文信息。</param>
        </member>
        <member name="T:Com.JinYiWei.Common.Exceptions.ExceptionMessage">
            <summary>
            异常信息封装类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Exceptions.ExceptionMessage.#ctor(System.Exception,System.String,System.Boolean)">
            <summary>
            以自定义用户信息和异常对象实例化一个异常信息对象
            </summary>
            <param name="e">异常对象</param>
            <param name="userMessage">自定义用户信息</param>
            <param name="isHideStackTrace">是否隐藏异常堆栈信息</param>
        </member>
        <member name="P:Com.JinYiWei.Common.Exceptions.ExceptionMessage.UserMessage">
            <summary>
            用户信息，用于报告给用户的异常消息
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Exceptions.ExceptionMessage.ExMessage">
            <summary>
            直接的Exception异常信息，即e.Message属性值
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Exceptions.ExceptionMessage.ErrorDetails">
            <summary>
            异常输出的详细描述，包含异常消息，规模信息，异常类型，异常源，引发异常的方法及内部异常信息
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Exceptions.ExceptionMessage.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            <see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Com.JinYiWei.Common.Extensions.AssemblyExtensions">
            <summary>
            程序集扩展操作类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.AssemblyExtensions.GetFileVersion(System.Reflection.Assembly)">
            <summary>
            获取程序集的文件版本
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.AssemblyExtensions.GetProductVersion(System.Reflection.Assembly)">
            <summary>
            获取程序集的产品版本
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Extensions.BitmapExtensions">
            <summary>
            图像扩展辅助操作
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.BitmapExtensions.Rotate(System.Drawing.Bitmap,System.Int32)">
            <summary>
            使图像绕中心点旋转一定角度
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <param name="angle"> 旋转的角度，正值为逆时针方向 </param>
            <returns> 旋转后的图像 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.BitmapExtensions.Zoom(System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            按指定宽度与高度缩放图像
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <param name="width"> 缩放后的宽度 </param>
            <param name="height"> 缩放后的高度 </param>
            <param name="model">图像质量模式</param>
            <returns> 缩放后的图像 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.BitmapExtensions.Zoom(System.Drawing.Bitmap,System.Double,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            按指定百分比缩放图像
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <param name="percent"> 缩放百分比（小数） </param>
            <param name="model">图像质量模式</param>
            <returns> 缩放后的图像 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.BitmapExtensions.Gray(System.Drawing.Bitmap)">
            <summary>
            图像灰度化
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <returns> 灰度化后的图像 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.BitmapExtensions.Brightness(System.Drawing.Bitmap,System.Int32)">
            <summary>
            调整图像亮度
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <param name="value"> 调整的亮度值，取值为[-255, 255] </param>
            <returns> 调整亮度后的图像 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.BitmapExtensions.Contrast(System.Drawing.Bitmap,System.Int32)">
            <summary>
            调整图像对比度
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <param name="value"> 调整的对比度，取值为[-100, 100] </param>
            <returns> 调整对比度后的图像 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.BitmapExtensions.Gamma(System.Drawing.Bitmap,System.Single)">
            <summary>
            Gamma校正
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <param name="value"> Gamma值 </param>
            <returns> Gamma校正后的图像 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.BitmapExtensions.SetText(System.Drawing.Bitmap,System.String,System.Drawing.Font,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            在图片上打印文字
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <param name="text"> 要打印的文字 </param>
            <param name="font"> 字体信息 </param>
            <param name="color"> 文字颜色 </param>
            <param name="x"> 文字位置横坐标 </param>
            <param name="y"> 文字位置纵坐标 </param>
            <returns> 打印文字后的图像 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.BitmapExtensions.Plate(System.Drawing.Bitmap)">
            <summary>
            底片效果
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <returns> 底片效果的图像 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.BitmapExtensions.Emboss(System.Drawing.Bitmap)">
            <summary>
            浮雕效果
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <returns> 浮雕效果的图像 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.BitmapExtensions.Soften(System.Drawing.Bitmap)">
            <summary>
            柔化效果
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <returns> 柔化效果的图像 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.BitmapExtensions.Sharpen(System.Drawing.Bitmap)">
            <summary>
            锐化效果
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <returns> 锐化效果的图像 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.BitmapExtensions.Atomizing(System.Drawing.Bitmap)">
            <summary>
            雾化效果
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <returns> 雾化效果的图像 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.BitmapExtensions.Binaryzation(System.Drawing.Bitmap)">
            <summary>
            二值化效果
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.BitmapExtensions.Binaryzation1(System.Drawing.Bitmap,System.Byte)">
            <summary>
            固定阈值的二值化
            </summary>
            <param name="bmp"> </param>
            <param name="threshold"> </param>
            <returns> </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.BitmapExtensions.OtsuThreshold(System.Drawing.Bitmap)">
            <summary>
            OTSU阈值法二值化
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.BitmapExtensions.Threshoding(System.Drawing.Bitmap,System.Byte)">
            <summary>
            固定阈值的二值化
            </summary>
            <param name="bmp"> </param>
            <param name="threshold"> </param>
            <returns> </returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Extensions.BooleanExtensions">
            <summary>
            布尔值<see cref="T:System.Boolean"/>类型的扩展辅助操作类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.BooleanExtensions.ToLower(System.Boolean)">
            <summary>
            把布尔值转换为小写字符串
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Extensions.CollectionExtensions">
            <summary>
            集合扩展方法类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.CollectionExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            将集合展开并分别转换成字符串，再以指定的分隔符衔接，拼成一个字符串返回。默认分隔符为逗号
            </summary>
            <param name="collection"> 要处理的集合 </param>
            <param name="separator"> 分隔符，默认为逗号 </param>
            <returns> 拼接后的字符串 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.CollectionExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            循环集合的每一项，调用委托生成字符串，返回合并后的字符串。默认分隔符为逗号
            </summary>
            <param name="collection">待处理的集合</param>
            <param name="itemFormatFunc">单个集合项的转换委托</param>
            <param name="separetor">分隔符，默认为逗号</param>
            <typeparam name="T">泛型类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.CollectionExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            集合是否为空
            </summary>
            <param name="collection"> 要处理的集合 </param>
            <typeparam name="T"> 动态类型 </typeparam>
            <returns> 为空返回True，不为空返回False </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.CollectionExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            根据第三方条件是否为真来决定是否执行指定条件的查询
            </summary>
            <param name="source"> 要查询的源 </param>
            <param name="predicate"> 查询条件 </param>
            <param name="condition"> 第三方条件 </param>
            <typeparam name="T"> 动态类型 </typeparam>
            <returns> 查询的结果 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.CollectionExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            根据指定条件返回集合中不重复的元素
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <typeparam name="TKey">动态筛选条件类型</typeparam>
            <param name="source">要操作的源</param>
            <param name="keySelector">重复数据筛选条件</param>
            <returns>不重复元素的集合</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.CollectionExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            把<see cref="T:System.Collections.Generic.IEnumerable`1"/>集合按指定字段与排序方式进行排序
            </summary>
            <typeparam name="T">集合项类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="propertyName">排序属性名</param>
            <param name="sortDirection">排序方向</param>
            <returns>排序后的数据集</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.CollectionExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Com.JinYiWei.Common.Data.SortCondition)">
            <summary>
            把<see cref="T:System.Collections.Generic.IEnumerable`1"/>集合按指定字段排序条件进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="sortCondition">列表字段排序条件</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.CollectionExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Com.JinYiWei.Common.Data.SortCondition{``0})">
            <summary>
            把<see cref="T:System.Collections.Generic.IEnumerable`1"/>集合按指定字段排序条件进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="sortCondition">列表字段排序条件</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.CollectionExtensions.ThenBy``1(System.Linq.IOrderedEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            把<see cref="T:System.Linq.IOrderedQueryable`1"/>集合继续按指定字段排序方式进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="propertyName">排序属性名</param>
            <param name="sortDirection">排序方向</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.CollectionExtensions.ThenBy``1(System.Linq.IOrderedEnumerable{``0},Com.JinYiWei.Common.Data.SortCondition)">
            <summary>
            把<see cref="T:System.Linq.IOrderedEnumerable`1"/>集合继续指定字段排序方式进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="sortCondition">列表字段排序条件</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.CollectionExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            根据第三方条件是否为真来决定是否执行指定条件的查询
            </summary>
            <param name="source"> 要查询的源 </param>
            <param name="predicate"> 查询条件 </param>
            <param name="condition"> 第三方条件 </param>
            <typeparam name="T"> 动态类型 </typeparam>
            <returns> 查询的结果 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.CollectionExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            把<see cref="T:System.Linq.IQueryable`1"/>集合按指定字段与排序方式进行排序
            </summary>
            <param name="source">要排序的数据集</param>
            <param name="propertyName">排序属性名</param>
            <param name="sortDirection">排序方向</param>
            <typeparam name="T">动态类型</typeparam>
            <returns>排序后的数据集</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.CollectionExtensions.OrderBy``1(System.Linq.IQueryable{``0},Com.JinYiWei.Common.Data.SortCondition)">
            <summary>
            把<see cref="T:System.Linq.IQueryable`1"/>集合按指定字段排序条件进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="sortCondition">列表字段排序条件</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.CollectionExtensions.OrderBy``1(System.Linq.IQueryable{``0},Com.JinYiWei.Common.Data.SortCondition{``0})">
            <summary>
            把<see cref="T:System.Linq.IQueryable`1"/>集合按指定字段排序条件进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="sortCondition">列表字段排序条件</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.CollectionExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            把<see cref="T:System.Linq.IOrderedQueryable`1"/>集合继续按指定字段排序方式进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="propertyName">排序属性名</param>
            <param name="sortDirection">排序方向</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.CollectionExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},Com.JinYiWei.Common.Data.SortCondition)">
            <summary>
            把<see cref="T:System.Linq.IOrderedQueryable`1"/>集合继续指定字段排序方式进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="sortCondition">列表字段排序条件</param>
            <returns></returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Extensions.DateTimeExtensions">
            <summary>
            时间扩展操作类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.DateTimeExtensions.IsWeekend(System.DateTime)">
            <summary>
            当前时间是否周末
            </summary>
            <param name="dateTime">时间点</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.DateTimeExtensions.IsWeekday(System.DateTime)">
            <summary>
            当前时间是否工作日
            </summary>
            <param name="dateTime">时间点</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.DateTimeExtensions.ToUniqueString(System.DateTime,System.Boolean)">
            <summary>
            获取时间相对唯一字符串
            </summary>
            <param name="dateTime"></param>
            <param name="milsec">是否使用毫秒</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.DateTimeExtensions.ToTimeStamp(System.DateTime)">
            <summary>
            生成时间戳
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Extensions.EnumExtensions">
            <summary>
            枚举<see cref="T:System.Enum"/>的扩展辅助操作方法
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.EnumExtensions.ToDescription(System.Enum)">
            <summary>
            获取枚举项上的<see cref="!:DescriptionAttribute"/>特性的文字描述
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Extensions.ExceptionExtensions">
            <summary>
            异常操作扩展
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ExceptionExtensions.FormatMessage(System.Exception,System.Boolean)">
            <summary>
            格式化异常消息
            </summary>
            <param name="e">异常对象</param>
            <param name="isHideStackTrace">是否隐藏异常规模信息</param>
            <returns>格式化后的异常信息字符串</returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Extensions.ExpressionExtensions">
            <summary>
            Expression表达式扩展操作类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ExpressionExtensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            以特定的条件运行组合两个Expression表达式
            </summary>
            <typeparam name="T">表达式的主实体类型</typeparam>
            <param name="first">第一个Expression表达式</param>
            <param name="second">要组合的Expression表达式</param>
            <param name="merge">组合条件运算方式</param>
            <returns>组合后的表达式</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ExpressionExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            以 Expression.AndAlso 组合两个Expression表达式
            </summary>
            <typeparam name="T">表达式的主实体类型</typeparam>
            <param name="first">第一个Expression表达式</param>
            <param name="second">要组合的Expression表达式</param>
            <returns>组合后的表达式</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            以 Expression.OrElse 组合两个Expression表达式
            </summary>
            <typeparam name="T">表达式的主实体类型</typeparam>
            <param name="first">第一个Expression表达式</param>
            <param name="second">要组合的Expression表达式</param>
            <returns>组合后的表达式</returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Extensions.LinqToXmlExtensions">
            <summary>
            Xml 扩展操作类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.LinqToXmlExtensions.ToXElement(System.Xml.XmlNode)">
            <summary>
            将XmlNode转换为XElement
            </summary>
            <returns> XElment对象 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.LinqToXmlExtensions.ToXmlNode(System.Xml.Linq.XElement)">
            <summary>
            将XElement转换为XmlNode
            </summary>
            <returns> 转换后的XmlNode </returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Extensions.MemoryCacheExtensions">
            <summary>
            内存缓存扩展操作类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.MemoryCacheExtensions.Get``1(System.Runtime.Caching.MemoryCache,System.String,System.String)">
            <summary>
            获取指定键值的强类型数据
            </summary>
            <typeparam name="T">强类型</typeparam>
            <param name="cache"></param>
            <param name="key">缓存键值</param>
            <param name="regionName">区域名称，默认不支持</param>
            <returns></returns>
        </member>
        <!-- 对于成员“T:Com.JinYiWei.Common.Extensions.ObjectExtensions”忽略有格式错误的 XML 注释 -->
        <member name="M:Com.JinYiWei.Common.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)">
            <summary>
            把对象类型转换为指定类型
            </summary>
            <param name="value"> 要转化的源对象 </param>
            <param name="conversionType"> 转化后的动态类型 </param>
            <returns> 转化后的指定类型的对象，转化失败引发异常。 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ObjectExtensions.CastTo``1(System.Object)">
            <summary>
            把对象类型转化为指定类型
            </summary>
            <typeparam name="T"> 转化后的动态类型 </typeparam>
            <param name="value"> 要转化的源对象 </param>
            <returns> 转化后的指定类型的对象，转化失败引发异常。 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ObjectExtensions.CastToWithNull``1(System.Object)">
            <summary>
            把对象类型转化为指定类型
            </summary>
            <typeparam name="T"> 转化后的动态类型 </typeparam>
            <param name="value"> 要转化的源对象 </param>
            <returns> 转化后的指定类型的对象，转化失败引发异常。 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)">
            <summary>
            把对象类型转化为指定类型，转化失败时返回指定的默认值
            </summary>
            <typeparam name="T"> 转化后的动态类型 </typeparam>
            <param name="value"> 要转化的源对象 </param>
            <param name="defaultValue"> 转化失败返回的指定默认值 </param>
            <returns> 转化后的指定类型对象，转化失败时返回指定的默认值 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ObjectExtensions.IsBetween``1(System.IComparable{``0},``0,``0,System.Boolean,System.Boolean)">
            <summary>
            判断当前值是否介于指定范围内
            </summary>
            <typeparam name="T"> 动态类型 </typeparam>
            <param name="value"> 动态类型对象 </param>
            <param name="start"> 范围起点 </param>
            <param name="end"> 范围终点 </param>
            <param name="leftEqual"> 是否可等于上限（默认等于） </param>
            <param name="rightEqual"> 是否可等于下限（默认等于） </param>
            <returns> 是否介于 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ObjectExtensions.ToJsonString``1(``0)">
            <summary>
            将对象序列化为JSON字符串，不支持存在循环引用的对象
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="value">动态类型对象</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ObjectExtensions.ToDynamic(System.Object)">
            <summary>
            将对象[主要是匿名对象]转换为dynamic
            </summary>
            <remarks>
            EntityFramework 使用 linq 查询匿名结果的方式很好用，性能又好，爽呆了，但由于匿名结果的可访问性是 internal，
            可是不能直接返回给View（View在编译之后是另外一个程序集了，internal不能跨程序集）使用，
            来个扩展方法专门把匿名对象转换为dynamic吧
            Demo:
            //Controller 端，转换为dynamic
            var data = new { Id = 1, Name = "GMF" };
            dynamic result = data.ToDynamic();
            Viewbag.Result = result;
            ...
            //View 端，可以直接用了
            dynamic result = Viewbag.Result;
            @result.Id
            @result.Name
            ...
            </remarks>
        </member>
        <member name="T:Com.JinYiWei.Common.Extensions.ParamterCheckExtensions">
            <summary>
            用于参数检查的扩展方法
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ParamterCheckExtensions.Require``1(System.Boolean,System.String)">
            <summary>
            验证指定值的断言<paramref name="assertion"/>是否为真，如果不为真，抛出指定消息<paramref name="message"/>的指定类型<typeparamref name="TException"/>异常
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <param name="assertion">要验证的断言。</param>
            <param name="message">异常消息。</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ParamterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            验证指定值的断言表达式是否为真，不为值抛出<see cref="T:System.Exception"/>异常
            </summary>
            <param name="value"></param>
            <param name="assertionFunc">要验证的断言表达式</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ParamterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            验证指定值的断言表达式是否为真，不为真抛出<see cref="!:TException"/>异常
            </summary>
            <typeparam name="T">要判断的值的类型</typeparam>
            <typeparam name="TException">抛出的异常类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="assertionFunc">要验证的断言表达式</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ParamterCheckExtensions.CheckNotNull``1(``0,System.String)">
            <summary>
            检查参数不能为空引用，否则抛出<see cref="T:System.ArgumentNullException"/>异常。
            </summary>
            <param name="value"></param>
            <param name="paramName">参数名称</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ParamterCheckExtensions.CheckNotNullOrEmpty(System.String,System.String)">
            <summary>
            检查字符串不能为空引用或空字符串，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ParamterCheckExtensions.CheckNotEmpty(System.Guid,System.String)">
            <summary>
            检查Guid值不能为Guid.Empty，否则抛出<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ParamterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            检查集合不能为空引用或空集合，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <typeparam name="T">集合项的类型。</typeparam>
            <param name="collection"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ParamterCheckExtensions.CheckLessThan``1(``0,System.String,``0,System.Boolean)">
            <summary>
            检查参数必须小于[或可等于，参数canEqual]指定值，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常。
            </summary>
            <typeparam name="T">参数类型。</typeparam>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <param name="target">要比较的值。</param>
            <param name="canEqual">是否可等于。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ParamterCheckExtensions.CheckGreaterThan``1(``0,System.String,``0,System.Boolean)">
            <summary>
            检查参数必须大于[或可等于，参数canEqual]指定值，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常。
            </summary>
            <typeparam name="T">参数类型。</typeparam>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <param name="target">要比较的值。</param>
            <param name="canEqual">是否可等于。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ParamterCheckExtensions.CheckBetween``1(``0,System.String,``0,``0,System.Boolean,System.Boolean)">
            <summary>
            检查参数必须在指定范围之间，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常。
            </summary>
            <typeparam name="T">参数类型。</typeparam>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <param name="start">比较范围的起始值。</param>
            <param name="end">比较范围的结束值。</param>
            <param name="startEqual">是否可等于起始值</param>
            <param name="endEqual">是否可等于结束值</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ParamterCheckExtensions.CheckDirectoryExists(System.String,System.String)">
            <summary>
            检查指定路径的文件夹必须存在，否则抛出<see cref="T:System.IO.DirectoryNotFoundException"/>异常。
            </summary>
            <param name="directory"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ParamterCheckExtensions.CheckFileExists(System.String,System.String)">
            <summary>
            检查指定路径的文件必须存在，否则抛出<see cref="T:System.IO.FileNotFoundException"/>异常。
            </summary>
            <param name="filename"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentNullException">当文件路径为null时</exception>
            <exception cref="T:System.IO.FileNotFoundException">当文件路径不存在时</exception>
        </member>
        <member name="T:Com.JinYiWei.Common.Extensions.RandomExtensions">
            <summary>
            随机数<see cref="T:System.Random"/>类型的扩展辅助操作类
            Random 的随机性是伪随机的，最好使用全局存在的Random对象，才能保证随机性，如果是即时声明的Random对象，在短时间内可能失去随机性。
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.RandomExtensions.NextBoolean(System.Random)">
            <summary>
            返回随机布尔值
            </summary>
            <param name="random"></param>
            <returns>随机布尔值</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.RandomExtensions.NextEnum``1(System.Random)">
            <summary>
            返回指定枚举类型的随机枚举值
            </summary>
            <param name="random"></param>
            <returns>指定枚举类型的随机枚举值</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.RandomExtensions.NextBytes(System.Random,System.Int32)">
            <summary>
            返回随机数填充的指定长度的数组
            </summary>
            <param name="random"></param>
            <param name="length">数组长度</param>
            <returns>随机数填充的指定长度的数组</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.RandomExtensions.NextItem``1(System.Random,``0[])">
            <summary>
            返回数组中的随机元素
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="random"></param>
            <param name="items">元素数组</param>
            <returns>元素数组中的某个随机项</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.RandomExtensions.NextDateTime(System.Random,System.DateTime,System.DateTime)">
            <summary>
            返回指定时间段内的随机时间值
            </summary>
            <param name="random"></param>
            <param name="minValue">时间范围的最小值</param>
            <param name="maxValue">时间范围的最大值</param>
            <returns>指定时间段内的随机时间值</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.RandomExtensions.NextDateTime(System.Random)">
            <summary>
            返回随机时间值
            </summary>
            <param name="random"></param>
            <returns>随机时间值</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.RandomExtensions.GetRandomNumberString(System.Random,System.Int32)">
            <summary>
            获取指定的长度的随机数字字符串
            </summary>
            <param name="random"></param>
            <param name="length">要获取随机数长度</param>
            <returns>指定长度的随机数字符串</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.RandomExtensions.GetRandomLetterString(System.Random,System.Int32)">
            <summary>
            获取指定的长度的随机字母字符串
            </summary>
            <param name="random"></param>
            <param name="length">要获取随机数长度</param>
            <returns>指定长度的随机字母组成字符串</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.RandomExtensions.GetRandomLetterAndNumberString(System.Random,System.Int32)">
            <summary>
            获取指定的长度的随机字母和数字字符串
            </summary>
            <param name="random"></param>
            <param name="length">要获取随机数长度</param>
            <returns>指定长度的随机字母和数字组成字符串</returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Extensions.StringBuilderExtensions">
            <summary>
            StringBuilder 扩展方法类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringBuilderExtensions.TrimStart(System.Text.StringBuilder)">
            <summary>
            去除<seealso cref="T:System.Text.StringBuilder"/>开头的空格
            </summary>
            <param name="sb">StringBuilder</param>
            <returns>返回修改后的StringBuilder，主要用于链式操作</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringBuilderExtensions.TrimStart(System.Text.StringBuilder,System.Char)">
            <summary>
            去除<seealso cref="T:System.Text.StringBuilder"/>开头的指定<seealso cref="T:System.Char"/>
            </summary>
            <param name="sb"></param>
            <param name="c">要去掉的<seealso cref="T:System.Char"/></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringBuilderExtensions.TrimStart(System.Text.StringBuilder,System.Char[])">
            <summary>
            去除<seealso cref="T:System.Text.StringBuilder"/>开头的指定字符数组
            </summary>
            <param name="sb"></param>
            <param name="cs">要去掉的字符数组</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringBuilderExtensions.TrimStart(System.Text.StringBuilder,System.String)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>开头的指定的<seealso cref="T:System.String"/>
            </summary>
            <param name="sb"></param>
            <param name="str">要去掉的<seealso cref="T:System.String"/></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder)">
            <summary>
            去除StringBuilder结尾的空格
            </summary>
            <param name="sb">StringBuilder</param>
            <returns>返回修改后的StringBuilder，主要用于链式操作</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder,System.Char)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>结尾指定字符
            </summary>
            <param name="sb"></param>
            <param name="c">要去掉的字符</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder,System.Char[])">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>结尾指定字符数组
            </summary>
            <param name="sb"></param>
            <param name="chars">要去除的字符数组</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder,System.String)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>结尾指定字符串
            </summary>
            <param name="sb"></param>
            <param name="str">要去除的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringBuilderExtensions.Trim(System.Text.StringBuilder)">
            <summary>
            去除StringBuilder两端的空格
            </summary>
            <param name="sb">StringBuilder</param>
            <returns>返回修改后的StringBuilder，主要用于链式操作</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringBuilderExtensions.SubString(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            返回<see cref="T:System.Text.StringBuilder"/>从起始位置指定长度的字符串
            </summary>
            <param name="sb"></param>
            <param name="start">起始位置</param>
            <param name="length">长度</param>
            <returns>字符串</returns>
            <exception cref="T:System.OverflowException">超出字符串索引长度异常</exception>
        </member>
        <member name="T:Com.JinYiWei.Common.Extensions.StringExtensions">
            <summary>
            字符串<see cref="T:System.String"/>类型的扩展辅助操作类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.IsMatch(System.String,System.String)">
            <summary>
            指示所指定的正则表达式在指定的输入字符串中是否找到了匹配项
            </summary>
            <param name="value">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>如果正则表达式找到匹配项，则为 true；否则，为 false</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.Match(System.String,System.String)">
            <summary>
            在指定的输入字符串中搜索指定的正则表达式的第一个匹配项
            </summary>
            <param name="value">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>一个对象，包含有关匹配项的信息</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.Matches(System.String,System.String)">
            <summary>
            在指定的输入字符串中搜索指定的正则表达式的所有匹配项的字符串集合
            </summary>
            <param name="value"> 要搜索匹配项的字符串 </param>
            <param name="pattern"> 要匹配的正则表达式模式 </param>
            <returns> 一个集合，包含有关匹配项的字符串值 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.IsEmail(System.String)">
            <summary>
            是否电子邮件
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.IsIpAddress(System.String)">
            <summary>
            是否是IP地址
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.IsNumeric(System.String)">
            <summary>
            是否是整数
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.IsUnicode(System.String)">
            <summary>
            是否是Unicode字符串
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.IsUrl(System.String)">
            <summary>
            是否Url字符串
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.IsIdentityCard(System.String)">
            <summary>
            是否身份证号，验证如下3种情况：
            1.身份证号码为15位数字；
            2.身份证号码为18位数字；
            3.身份证号码为17位数字+1个字母
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.IsMobileNumber(System.String,System.Boolean)">
            <summary>
            是否手机号码
            </summary>
            <param name="value"></param>
            <param name="isRestrict">是否按严格格式验证</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            指示指定的字符串是 null 还是 System.String.Empty 字符串
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            指示指定的字符串是 null、空还是仅由空白字符组成。
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.IsMissing(System.String)">
            <summary>
            指示指定的字符串是 null、空还是仅由空白字符组成。
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            为指定格式的字符串填充相应对象来生成字符串
            </summary>
            <param name="format">字符串格式，占位符以{n}表示</param>
            <param name="args">用于填充占位符的参数</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.ReverseString(System.String)">
            <summary>
            将字符串反转
            </summary>
            <param name="value">要反转的字符串</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.IsImageFile(System.String)">
            <summary>
            判断指定路径是否图片文件
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.Split(System.String,System.String,System.Boolean)">
            <summary>
            以指定字符串作为分隔符将指定字符串分隔成数组
            </summary>
            <param name="value">要分割的字符串</param>
            <param name="strSplit">字符串类型的分隔符</param>
            <param name="removeEmptyEntries">是否移除数据中元素为空字符串的项</param>
            <returns>分割后的数据</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.ToMd5Hash(System.String)">
            <summary>
            获取字符串的MD5 Hash值
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.TextLength(System.String)">
            <summary>
            支持汉字的字符串长度，汉字长度计为2
            </summary>
            <param name="value">参数字符串</param>
            <returns>当前字符串的长度，汉字长度为2</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.FromJsonString``1(System.String)">
            <summary>
            将JSON字符串还原为对象
            </summary>
            <typeparam name="T">要转换的目标类型</typeparam>
            <param name="json">JSON字符串 </param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.AddQueryString(System.String,System.String[])">
            <summary>
            给URL添加查询参数
            </summary>
            <param name="url">URL字符串</param>
            <param name="queries">要添加的参数，形如："id=1,cid=2"</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.AddHashFragment(System.String,System.String)">
            <summary>
            给URL添加 # 参数
            </summary>
            <param name="url">URL字符串</param>
            <param name="query">要添加的参数</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            将字符串转换为<see cref="T:System.Byte"/>[]数组，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.ToString(System.Byte[],System.Text.Encoding)">
            <summary>
            将<see cref="T:System.Byte"/>[]数组转换为字符串，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.ToDate(System.String)">
            <summary>
            将时间戳转化为日期
            </summary>
            <param name="datestr"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.ToDate(System.Int32)">
            <summary>
            将时间戳转化为日期
            </summary>
            <param name="datestr"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.StringToUnicode(System.String)">
            <summary>
            字符串转为UniCode码字符串
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.StringExtensions.UnicodeToString(System.String)">
            <summary>
            Unicode字符串转为正常字符串
            </summary>
            <param name="srcText"></param>
            <returns></returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Extensions.ThreadExtensions">
            <summary>
            线程扩展操作类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ThreadExtensions.CancelSleep(System.Threading.Thread)">
            <summary>
            取消Thread.Sleep状态，继续线程
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.ThreadExtensions.StartAndIgnoreAbort(System.Threading.Thread,System.Action{System.Exception})">
            <summary>
            启动线程，自动忽略停止线程时触发的<see cref="T:System.Threading.ThreadAbortException"/>异常
            </summary>
            <param name="thread">线程</param>
            <param name="failAction">引发非<see cref="T:System.Threading.ThreadAbortException"/>异常时执行的逻辑</param>
        </member>
        <member name="T:Com.JinYiWei.Common.Extensions.TryCatchExtensions">
            <summary>
            Try-Catch扩展操作
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})">
            <summary>
            对某对象执行指定功能与后续功能，并处理异常情况
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="source">值</param>
            <param name="action">要对值执行的主功能代码</param>
            <param name="failureAction">catch中的功能代码</param>
            <param name="successAction">主功能代码成功后执行的功能代码</param>
            <returns>主功能代码是否顺利执行</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})">
            <summary>
            对某对象执行指定功能，并处理异常情况
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="source">值</param>
            <param name="action">要对值执行的主功能代码</param>
            <param name="failureAction">catch中的功能代码</param>
            <returns>主功能代码是否顺利执行</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})">
            <summary>
            对某对象执行指定功能，并处理异常情况与返回值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="source">值</param>
            <param name="func">要对值执行的主功能代码</param>
            <param name="failureAction">catch中的功能代码</param>
            <param name="successAction">主功能代码成功后执行的功能代码</param>
            <returns>功能代码的返回值，如果出现异常，则返回对象类型的默认值</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})">
            <summary>
            对某对象执行指定功能，并处理异常情况与返回值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="source">值</param>
            <param name="func">要对值执行的主功能代码</param>
            <param name="failureAction">catch中的功能代码</param>
            <returns>功能代码的返回值，如果出现异常，则返回对象类型的默认值</returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Extensions.TypeExtensions">
            <summary>
            类型<see cref="T:System.Type"/>辅助扩展方法类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.TypeExtensions.IsNullableType(System.Type)">
            <summary>
            判断类型是否为Nullable类型
            </summary>
            <param name="type"> 要处理的类型 </param>
            <returns> 是返回True，不是返回False </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.TypeExtensions.GetNonNummableType(System.Type)">
            <summary>
            由类型的Nullable类型返回实际类型
            </summary>
            <param name="type"> 要处理的类型对象 </param>
            <returns> </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.TypeExtensions.GetUnNullableType(System.Type)">
            <summary>
            通过类型转换器获取Nullable类型的基础类型
            </summary>
            <param name="type"> 要处理的类型对象 </param>
            <returns> </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.TypeExtensions.ToDescription(System.Type,System.Boolean)">
            <summary>
            获取类型的Description特性描述信息
            </summary>
            <param name="type">类型对象</param>
            <param name="inherit">是否搜索类型的继承链以查找描述特性</param>
            <returns>返回Description特性描述信息，如不存在则返回类型的全名</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.TypeExtensions.ToDescription(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取成员元数据的Description特性描述信息
            </summary>
            <param name="member">成员元数据对象</param>
            <param name="inherit">是否搜索成员的继承链以查找描述特性</param>
            <returns>返回Description特性描述信息，如不存在则返回成员的名称</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.TypeExtensions.HasAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            检查指定指定类型成员中是否存在指定的Attribute特性
            </summary>
            <typeparam name="T">要检查的Attribute特性类型</typeparam>
            <param name="memberInfo">要检查的类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.TypeExtensions.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            从类型成员获取指定Attribute特性
            </summary>
            <typeparam name="T">Attribute特性类型</typeparam>
            <param name="memberInfo">类型类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>存在返回第一个，不存在返回null</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.TypeExtensions.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            从类型成员获取指定Attribute特性
            </summary>
            <typeparam name="T">Attribute特性类型</typeparam>
            <param name="memberInfo">类型类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>返回所有指定Attribute特性的数组</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.TypeExtensions.IsEnumerable(System.Type)">
            <summary>
            判断类型是否为集合类型
            </summary>
            <param name="type">要处理的类型</param>
            <returns>是返回True，不是返回False</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.TypeExtensions.IsGenericAssignableFrom(System.Type,System.Type)">
            <summary>
            判断当前泛型类型是否可由指定类型的实例填充
            </summary>
            <param name="genericType">泛型类型</param>
            <param name="type">指定类型</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.TypeExtensions.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            方法是否是异步
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.TypeExtensions.IsBaseOn(System.Type,System.Type)">
            <summary>
            返回当前类型是否是指定基类的派生类
            </summary>
            <param name="type">当前类型</param>
            <param name="baseType">要判断的基类型</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Extensions.TypeExtensions.IsBaseOn``1(System.Type)">
            <summary>
            返回当前类型是否是指定基类的派生类
            </summary>
            <typeparam name="TBaseType">要判断的基类型</typeparam>
            <param name="type">当前类型</param>
            <returns></returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Filter.CollectionPropertySorter`1">
            <summary>
            集合类型字符串排序操作类
            </summary>
            <typeparam name="T">集合项类型</typeparam>
        </member>
        <member name="M:Com.JinYiWei.Common.Filter.CollectionPropertySorter`1.OrderBy(System.Collections.Generic.IEnumerable{`0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            按指定的属性名称对<see cref="T:System.Collections.Generic.IEnumerable`1"/>序列进行排序
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/>序列</param>
            <param name="propertyName">属性名称</param>
            <param name="sortDirection">排序方向</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Filter.CollectionPropertySorter`1.ThenBy(System.Linq.IOrderedEnumerable{`0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            按指定的属性名称对<see cref="T:System.Linq.IOrderedEnumerable`1"/>进行继续排序
            </summary>
            <param name="source"><see cref="T:System.Linq.IOrderedEnumerable`1"/>序列</param>
            <param name="propertyName">属性名称</param>
            <param name="sortDirection">排序方向</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Filter.CollectionPropertySorter`1.OrderBy(System.Linq.IQueryable{`0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            按指定的属性名称对<see cref="T:System.Linq.IQueryable`1"/>序列进行排序
            </summary>
            <param name="source">IQueryable{T}序列</param>
            <param name="propertyName">属性名称</param>
            <param name="sortDirection">排序方向</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Filter.CollectionPropertySorter`1.ThenBy(System.Linq.IOrderedQueryable{`0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            按指定的属性名称对<see cref="T:System.Linq.IOrderedQueryable`1"/>序列进行排序
            </summary>
            <param name="source">IOrderedQueryable{T}序列</param>
            <param name="propertyName">属性名称</param>
            <param name="sortDirection">排序方向</param>
            <returns></returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Filter.FilterGroup">
            <summary>
            筛选条件组
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Filter.FilterGroup.#ctor">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Filter.FilterGroup"/>的新实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Filter.FilterGroup.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Filter.FilterGroup"/>类型的新实例
            </summary>
            <param name="operateCode">条件间操作方式的前台码</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Filter.FilterGroup.#ctor(Com.JinYiWei.Common.Filter.FilterOperate)">
            <summary>
            使用操作方式初始化一个<see cref="T:Com.JinYiWei.Common.Filter.FilterGroup"/>的新实例
            </summary>
            <param name="operate">条件间操作方式</param>
        </member>
        <member name="P:Com.JinYiWei.Common.Filter.FilterGroup.Rules">
            <summary>
            获取或设置 条件集合
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Filter.FilterGroup.Groups">
            <summary>
            获取或设置 条件组集合
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Filter.FilterGroup.Operate">
            <summary>
            获取或设置 条件间操作方式，仅限And, Or
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Filter.FilterHelper">
            <summary>
            查询表达式辅助操作类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Filter.FilterHelper.GetExpression``1(Com.JinYiWei.Common.Filter.FilterGroup)">
            <summary>
            获取指定查询条件组的查询表达式
            </summary>
            <typeparam name="T">表达式实体类型</typeparam>
            <param name="group">查询条件组，如果为null，则直接返回 true 表达式</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Filter.FilterHelper.GetExpression``1(Com.JinYiWei.Common.Filter.FilterRule)">
            <summary>
            获取指定查询条件的查询表达式
            </summary>
            <typeparam name="T">表达式实体类型</typeparam>
            <param name="rule">查询条件，如果为null，则直接返回 true 表达式</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Filter.FilterHelper.ToOperateCode(Com.JinYiWei.Common.Filter.FilterOperate)">
            <summary>
            把查询操作的枚举表示转换为操作码
            </summary>
            <param name="operate">查询操作的枚举表示</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Filter.FilterHelper.GetFilterOperate(System.String)">
            <summary>
            获取操作码的查询操作枚举表示
            </summary>
            <param name="code">操作码</param>
            <returns></returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Filter.FilterOperate">
            <summary>
            筛选操作方式
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Filter.FilterOperate.And">
            <summary>
            并且
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Filter.FilterOperate.Or">
            <summary>
            或者
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Filter.FilterOperate.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Filter.FilterOperate.NotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Filter.FilterOperate.Less">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Filter.FilterOperate.LessOrEqual">
            <summary>
            小于或等于
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Filter.FilterOperate.Greater">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Filter.FilterOperate.GreaterOrEqual">
            <summary>
            大于或等于
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Filter.FilterOperate.StartsWith">
            <summary>
            以……开始
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Filter.FilterOperate.EndsWith">
            <summary>
            以……结束
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Filter.FilterOperate.Contains">
            <summary>
            字符串的包含（相似）
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Filter.FilterOperate.NotContains">
            <summary>
            字符串的不包含
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Filter.FilterRule">
            <summary>
            筛选条件
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Filter.FilterRule.#ctor">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Filter.FilterRule"/>的新实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Filter.FilterRule.#ctor(System.String,System.Object)">
            <summary>
            使用指定数据名称，数据值初始化一个<see cref="T:Com.JinYiWei.Common.Filter.FilterRule"/>的新实例
            </summary>
            <param name="field">数据名称</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Filter.FilterRule.#ctor(System.String,System.Object,System.String)">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Filter.FilterRule"/>类型的新实例
            </summary>
            <param name="field">数据名称</param>
            <param name="value">数据值</param>
            <param name="operateCode">操作方式的前台码</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Filter.FilterRule.#ctor(System.String,System.Object,Com.JinYiWei.Common.Filter.FilterOperate)">
            <summary>
            使用指定数据名称，数据值及操作方式初始化一个<see cref="T:Com.JinYiWei.Common.Filter.FilterRule"/>的新实例
            </summary>
            <param name="field">数据名称</param>
            <param name="value">数据值</param>
            <param name="operate">操作方式</param>
        </member>
        <member name="P:Com.JinYiWei.Common.Filter.FilterRule.Field">
            <summary>
            获取或设置 属性名称
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Filter.FilterRule.Value">
            <summary>
            获取或设置 属性值
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Filter.FilterRule.Operate">
            <summary>
            获取或设置 操作类型
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Filter.OperateCodeAttribute">
            <summary>
            表示查询操作的前台操作码
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Filter.OperateCodeAttribute.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Filter.OperateCodeAttribute"/>类型的新实例
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Filter.OperateCodeAttribute.Code">
            <summary>
            获取 属性名称
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Filter.PageResult`1">
            <summary>
            数据分页信息
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Filter.PageResult`1.Data">
            <summary>
            获取或设置 分页数据
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Filter.PageResult`1.Total">
            <summary>
            获取或设置 总记录数
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Helper.APIHelper">
            <summary>
            API
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Helper.APIHelper.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="tokenUrl"></param>
            <param name="appid"></param>
            <param name="appsecret"></param>
            <param name="signKey"></param>
            <param name="tokenRedisKey"></param>
        </member>
        <member name="M:Com.JinYiWei.Common.Helper.APIHelper.Post``2(System.String,``1)">
            <summary>
            POST提交，返回具体的类，异步
            </summary>
            <typeparam name="T">泛型，返回值类型</typeparam>
            <typeparam name="S">泛型，传入的值类型</typeparam>
            <param name="url">API地址</param>
            <param name="tokenUrl">Token地址</param>
            <param name="appid">appid</param>
            <param name="appsecret">appsecret</param>
            <param name="signKey">signKey</param>
            <param name="data">传入的具体的值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Helper.APIHelper.PostResult``2(System.String,``1)">
            <summary>
            POST提交，返回具体的类，异步
            </summary>
            <typeparam name="T">泛型，返回值类型</typeparam>
            <typeparam name="S">泛型，传入的值类型</typeparam>
            <param name="url">API地址</param>
            <param name="tokenUrl">Token地址</param>
            <param name="appid">appid</param>
            <param name="appsecret">appsecret</param>
            <param name="signKey">signKey</param>
            <param name="data">传入的具体的值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Helper.APIHelper.Post``1(System.String,``0)">
            <summary>
            POST，返回JSON字符串，异步
            </summary>
            <typeparam name="T">泛型，传入参数类型</typeparam>
            <param name="url">API地址</param>
            <param name="tokenUrl">Token地址</param>
            <param name="appid">appid</param>
            <param name="appsecret">appsecret</param>
            <param name="signKey">signKey</param>
            <param name="data">传入的具体的值</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Helper.APIHelper.PostResult``1(System.String,``0)">
            <summary>
            POST，返回JSON字符串，同步
            </summary>
            <typeparam name="T">泛型，传入参数类型</typeparam>
            <param name="url">API地址</param>
            <param name="tokenUrl">Token地址</param>
            <param name="appid">appid</param>
            <param name="appsecret">appsecret</param>
            <param name="signKey">signKey</param>
            <param name="data">传入的具体的值</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Helper.APIHelper.Get``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            GET请求，返回具体的类，异步
            </summary>
            <typeparam name="T">泛型，传入参数类型</typeparam>
            <param name="url">API地址</param>
            <param name="tokenUrl">Token地址</param>
            <param name="appid">appid</param>
            <param name="appsecret">appsecret</param>
            <param name="signKey">signKey</param>
            <param name="parames">URL字符串组</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Helper.APIHelper.GetResult``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            GET请求，返回具体的类 ,同步
            </summary>
            <typeparam name="T">泛型，传入参数类型</typeparam>
            <param name="url">API地址</param>
            <param name="tokenUrl">Token地址</param>
            <param name="appid">appid</param>
            <param name="appsecret">appsecret</param>
            <param name="signKey">signKey</param>
            <param name="parames">URL字符串组</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Helper.APIHelper.Get(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            GET请求，返回JSON字符串,异步
            </summary>
            <param name="url">API地址</param>
            <param name="tokenUrl">Token地址</param>
            <param name="appid">appid</param>
            <param name="appsecret">appsecret</param>
            <param name="signKey">signKey</param>
            <param name="parames">URL字符串组</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Helper.APIHelper.GetResult(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            GET请求，返回JSON字符串,同步
            </summary>
            <param name="url">API地址</param>
            <param name="tokenUrl">Token地址</param>
            <param name="appid">appid</param>
            <param name="appsecret">appsecret</param>
            <param name="signKey">signKey</param>
            <param name="parames">URL字符串组</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Helper.APIHelper.GetTokenResult(System.String)">
            <summary>
            同步获取token方法
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Helper.IpLocation">
            <summary>
            IP位置信息类
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Helper.IpLocation.Ip">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Helper.IpLocation.Country">
            <summary>
            IP地址所属国家
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Helper.IpLocation.Local">
            <summary>
            位置信息
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Helper.IpLocator">
            <summary>
            IP位置查找操作类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Helper.IpLocator.#ctor(System.String)">
            <summary>
            初始化一个IP位置查找操作类的实例
            </summary>
            <param name="dataPath"> IP信息数据文件路径 </param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Com.JinYiWei.Common.Helper.IpLocator.Count">
            <summary>
            数据文件中信息数量
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Helper.IpLocator.IpToInt(System.String)">
            <summary>
            IP地址转化成整数
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Helper.IpLocator.IntToIp(System.Int64)">
            <summary>
            IP地址从整数类型转化为正常IP类型
            </summary>
            <param name="ipInt"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Helper.IpLocator.Query(System.String)">
            <summary>
            由IP地址查找对应的位置信息
            </summary>
            <param name="ip"> 要查找的IP地址 </param>
            <returns> </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Com.JinYiWei.Common.Helper.IpLocator.Query2(System.String)">
            <summary>
            由IP地址查找对应的位置信息的字符串
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Helper.IpLocator.GetCountry(System.Int64,System.Int32,System.String@)">
            <summary>
            Gets the country.
            </summary>
            <param name="endIpOff"> The end ip off. </param>
            <param name="countryFlag"> The country flag. </param>
            <param name="local"> The local. </param>
            <returns> country </returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Helper.UserAgentHelper">
            <summary>
            UserAgent辅助操作类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Helper.UserAgentHelper.GetOperatingSystemName(System.String)">
            <summary>
            根据 UserAgent 获取操作系统名称
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Helper.UserAgentHelper.GetBrowserName(System.String)">
            <summary>
            根据 UserAgent 获取浏览器名称
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Image.ImgHelp.GetPicThumbnail(System.IO.Stream,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            无损压缩图片
            </summary>
            <param name="sFile">原图片</param>
            <param name="dFile">压缩后保存位置</param>
            <param name="dHeight">高度</param>
            <param name="dWidth"></param>
            <param name="flag">压缩质量 1-100</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Image.QRCodeHelper.CreateCode_Choose(System.String,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            生成二维码
            </summary>
            <param name="strData">要生成的文字或者数字，支持中文。如： "4408810820 深圳－广州" 或者：4444444444</param>
            <param name="qrEncoding">三种尺寸：BYTE ，ALPHA_NUMERIC，NUMERIC</param>
            <param name="level">大小：L M Q H</param>
            <param name="version">版本：如 8</param>
            <param name="scale">比例：如 4</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Image.QRCodeHelper.CodeDecoder(System.String)">
            <summary>
            二维码解码
            </summary>
            <param name="filePath">图片路径</param>
            <returns></returns>
        </member>
        <member name="T:Com.JinYiWei.Common.IO.DirectoryHelper">
            <summary>
            目录操作辅助类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.IO.DirectoryHelper.Copy(System.String,System.String,System.String[])">
            <summary>
            递归复制文件夹及文件夹/文件
            </summary>
            <param name="sourcePath"> 源文件夹路径 </param>
            <param name="targetPath"> 目的文件夹路径 </param>
            <param name="searchPatterns"> 要复制的文件扩展名数组 </param>
        </member>
        <member name="M:Com.JinYiWei.Common.IO.DirectoryHelper.Delete(System.String,System.Boolean)">
            <summary>
            递归删除目录
            </summary>
            <param name="directory"> 目录路径 </param>
            <param name="isDeleteRoot"> 是否删除根目录 </param>
            <returns> 是否成功 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.IO.DirectoryHelper.SetAttributes(System.String,System.IO.FileAttributes,System.Boolean)">
            <summary>
            设置或取消目录的<see cref="T:System.IO.FileAttributes"/>属性。
            </summary>
            <param name="directory">目录路径</param>
            <param name="attribute">要设置的目录属性</param>
            <param name="isSet">true为设置，false为取消</param>
        </member>
        <member name="T:Com.JinYiWei.Common.IO.FileHelper">
            <summary>
            文件辅助操作类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.IO.FileHelper.Delete(System.String,System.Boolean)">
            <summary>
            删除文件（到回收站[可选]）
            </summary>
            <param name="filename">要删除的文件名</param>
            <param name="isSendToRecycleBin">是否删除到回收站</param>
        </member>
        <member name="M:Com.JinYiWei.Common.IO.FileHelper.SetAttribute(System.String,System.IO.FileAttributes,System.Boolean)">
            <summary>
            设置或取消文件的指定<see cref="T:System.IO.FileAttributes"/>属性
            </summary>
            <param name="fileName">文件名</param>
            <param name="attribute">要设置的文件属性</param>
            <param name="isSet">true为设置，false为取消</param>
        </member>
        <member name="M:Com.JinYiWei.Common.IO.FileHelper.GetVersion(System.String)">
            <summary>
            获取文件版本号
            </summary>
            <param name="fileName"> 完整文件名 </param>
            <returns> 文件版本号 </returns>
        </member>
        <member name="M:Com.JinYiWei.Common.IO.FileHelper.GetFileMd5(System.String)">
            <summary>
            获取文件的MD5值
            </summary>
            <param name="fileName"> 文件名 </param>
            <returns> 32位MD5 </returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Logging.ILog">
            <summary>
            表示日志实例的接口
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Logging.ILog.IsDataLogging">
            <summary>
            获取 是否数据日志对象
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Logging.ILog.IsTraceEnabled">
            <summary>
            获取 是否允许<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Trace"/>级别的日志
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Logging.ILog.IsDebugEnabled">
            <summary>
            获取 是否允许<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Debug"/>级别的日志
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Logging.ILog.IsInfoEnabled">
            <summary>
            获取 是否允许<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Info"/>级别的日志
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Logging.ILog.IsWarnEnabled">
            <summary>
            获取 是否允许<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Warn"/>级别的日志
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Logging.ILog.IsErrorEnabled">
            <summary>
            获取 是否允许<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Error"/>级别的日志
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Logging.ILog.IsFatalEnabled">
            <summary>
            获取 是否允许<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Fatal"/>级别的日志
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Logging.ILogger">
            <summary>
            定义日志记录行为
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILogger.Trace``1(``0)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Trace"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILogger.Trace(System.String,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Trace"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILogger.Trace(System.String)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Trace"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILogger.Debug``1(``0)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Debug"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILogger.Debug(System.String,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Debug"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILogger.Debug(System.String)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Debug"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILogger.Info``1(``0,System.Boolean)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Info"/>日志消息
            </summary>
            <param name="message">日志消息</param>
            <param name="isData">是否数据日志</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILogger.Info(System.String,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Info"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILogger.Info(System.String)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Info"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILogger.Warn``1(``0)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Warn"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILogger.Warn(System.String,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Warn"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILogger.Warn(System.String)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Warn"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILogger.Error``1(``0)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Error"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILogger.Error(System.String,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Error"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILogger.Error``1(``0,System.Exception)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Error"/>日志消息，并记录异常
            </summary>
            <param name="message">日志消息</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILogger.Error(System.String,System.Exception,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Error"/>格式化日志消息，并记录异常
            </summary>
            <param name="format">日志消息格式</param>
            <param name="exception">异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILogger.Fatal``1(``0)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Fatal"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILogger.Fatal(System.String,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Fatal"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILogger.Fatal(System.String)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Fatal"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILogger.Fatal``1(``0,System.Exception)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Fatal"/>日志消息，并记录异常
            </summary>
            <param name="message">日志消息</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILogger.Fatal(System.String,System.Exception,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Fatal"/>格式化日志消息，并记录异常
            </summary>
            <param name="format">日志消息格式</param>
            <param name="exception">异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="T:Com.JinYiWei.Common.Logging.ILoggerAdapter">
            <summary>
            定义日志输出适配器的方法
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILoggerAdapter.GetLogger(System.Type)">
            <summary>
            由指定类型获取<see cref="T:Com.JinYiWei.Common.Logging.ILog"/>日志实例
            </summary>
            <param name="type">指定类型</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.ILoggerAdapter.GetLogger(System.String)">
            <summary>
            由指定名称获取<see cref="T:Com.JinYiWei.Common.Logging.ILog"/>日志实例
            </summary>
            <param name="name">指定名称</param>
            <returns></returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Logging.InternalLogger">
            <summary>
            日志记录者，日志记录输入端
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.InternalLogger.#ctor(System.Type)">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Logging.InternalLogger"/>新实例
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.InternalLogger.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Logging.InternalLogger"/>新实例
            </summary>
            <param name="name">指定名称</param>
        </member>
        <member name="P:Com.JinYiWei.Common.Logging.InternalLogger.EntryEnabled">
            <summary>
            获取或设置 是否允许记录日志，如为 false，将完全禁止日志记录
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Logging.InternalLogger.EntryLogLevel">
            <summary>
            获取或设置 日志级别的入口控制，级别决定是否执行相应级别的日志记录功能
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.InternalLogger.Trace``1(``0)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Trace"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.InternalLogger.Trace(System.String,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Trace"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.InternalLogger.Debug``1(``0)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Debug"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.InternalLogger.Debug(System.String,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Debug"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.InternalLogger.Info``1(``0,System.Boolean)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Info"/>日志消息
            </summary>
            <param name="message">日志消息</param>
            <param name="isData">是否数据日志</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.InternalLogger.Info(System.String,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Info"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.InternalLogger.Warn``1(``0)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Warn"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.InternalLogger.Warn(System.String,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Warn"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.InternalLogger.Error``1(``0)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Error"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.InternalLogger.Error(System.String,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Error"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.InternalLogger.Error``1(``0,System.Exception)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Error"/>日志消息，并记录异常
            </summary>
            <param name="message">日志消息</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.InternalLogger.Error(System.String,System.Exception,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Error"/>格式化日志消息，并记录异常
            </summary>
            <param name="format">日志消息格式</param>
            <param name="exception">异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.InternalLogger.Fatal``1(``0)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Fatal"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.InternalLogger.Fatal(System.String,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Fatal"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.InternalLogger.Fatal``1(``0,System.Exception)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Fatal"/>日志消息，并记录异常
            </summary>
            <param name="message">日志消息</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.InternalLogger.Fatal(System.String,System.Exception,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Fatal"/>格式化日志消息，并记录异常
            </summary>
            <param name="format">日志消息格式</param>
            <param name="exception">异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="T:Com.JinYiWei.Common.Logging.LogBase">
            <summary>
            日志输出者适配基类，用于定义日志输出的处理业务
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogBase.Write(Com.JinYiWei.Common.Logging.LogLevel,System.Object,System.Exception,System.Boolean)">
            <summary>
            获取日志输出处理委托实例
            </summary>
            <param name="level">日志输出级别</param>
            <param name="message">日志消息</param>
            <param name="exception">日志异常</param>
            <param name="isData">是否数据日志</param>
        </member>
        <member name="P:Com.JinYiWei.Common.Logging.LogBase.IsDataLogging">
            <summary>
            获取 是否数据日志对象
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Logging.LogBase.IsTraceEnabled">
            <summary>
            获取 是否允许输出<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Trace"/>级别的日志
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Logging.LogBase.IsDebugEnabled">
            <summary>
            获取 是否允许输出<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Debug"/>级别的日志
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Logging.LogBase.IsInfoEnabled">
            <summary>
            获取 是否允许输出<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Info"/>级别的日志
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Logging.LogBase.IsWarnEnabled">
            <summary>
            获取 是否允许输出<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Warn"/>级别的日志
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Logging.LogBase.IsErrorEnabled">
            <summary>
            获取 是否允许输出<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Error"/>级别的日志
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Logging.LogBase.IsFatalEnabled">
            <summary>
            获取 是否允许输出<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Fatal"/>级别的日志
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogBase.Trace``1(``0)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Trace"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogBase.Trace(System.String,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Trace"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogBase.Debug``1(``0)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Debug"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogBase.Debug(System.String,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Debug"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogBase.Info``1(``0,System.Boolean)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Info"/>日志消息
            </summary>
            <param name="message">日志消息</param>
            <param name="isData">是否数据日志</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogBase.Info(System.String,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Info"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogBase.Warn``1(``0)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Warn"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogBase.Warn(System.String,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Warn"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogBase.Error``1(``0)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Error"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogBase.Error(System.String,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Error"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogBase.Error``1(``0,System.Exception)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Error"/>日志消息，并记录异常
            </summary>
            <param name="message">日志消息</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogBase.Error(System.String,System.Exception,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Error"/>格式化日志消息，并记录异常
            </summary>
            <param name="format">日志消息格式</param>
            <param name="exception">异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogBase.Fatal``1(``0)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Fatal"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogBase.Fatal(System.String,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Fatal"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogBase.Fatal``1(``0,System.Exception)">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Fatal"/>日志消息，并记录异常
            </summary>
            <param name="message">日志消息</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogBase.Fatal(System.String,System.Exception,System.Object[])">
            <summary>
            写入<see cref="F:Com.JinYiWei.Common.Logging.LogLevel.Fatal"/>格式化日志消息，并记录异常
            </summary>
            <param name="format">日志消息格式</param>
            <param name="exception">异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="T:Com.JinYiWei.Common.Logging.LoggerAdapterBase">
            <summary>
            按名称缓存的日志实现适配器基类，用于创建并管理指定类型的日志实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LoggerAdapterBase.#ctor">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Logging.LoggerAdapterBase"/>类型的新实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LoggerAdapterBase.GetLogger(System.Type)">
            <summary>
            由指定类型获取<see cref="T:Com.JinYiWei.Common.Logging.ILog"/>日志实例
            </summary>
            <param name="type">指定类型</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LoggerAdapterBase.GetLogger(System.String)">
            <summary>
            由指定名称获取<see cref="T:Com.JinYiWei.Common.Logging.ILog"/>日志实例
            </summary>
            <param name="name">指定名称</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LoggerAdapterBase.CreateLogger(System.String)">
            <summary>
            创建指定名称的缓存实例
            </summary>
            <param name="name">指定名称</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LoggerAdapterBase.ClearLoggerCache">
            <summary>
            清除缓存中的日志实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LoggerAdapterBase.GetLoggerInternal(System.String)">
            <summary>
            获取指定名称的Logger实例
            </summary>
            <param name="name">指定名称</param>
            <returns>日志实例</returns>
            <exception cref="T:System.NotSupportedException">指定名称的日志缓存实例不存在则返回异常<see cref="T:System.NotSupportedException"/></exception>
        </member>
        <member name="T:Com.JinYiWei.Common.Logging.LogLevel">
            <summary>
            表示日志输出级别的枚举
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Logging.LogLevel.All">
            <summary>
            输出所有级别的日志
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Logging.LogLevel.Trace">
            <summary>
            表示跟踪的日志级别
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Logging.LogLevel.Debug">
            <summary>
            表示调试的日志级别
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Logging.LogLevel.Info">
            <summary>
            表示消息的日志级别
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Logging.LogLevel.Warn">
            <summary>
            表示警告的日志级别
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Logging.LogLevel.Error">
            <summary>
            表示错误的日志级别
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Logging.LogLevel.Fatal">
            <summary>
            表示严重错误的日志级别
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Logging.LogLevel.Off">
            <summary>
            关闭所有日志，不输出日志
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Logging.LogManager">
            <summary>
            日志管理器
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogManager.#cctor">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Logging.LogManager"/>实例
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Logging.LogManager.Adapters">
            <summary>
            获取 日志适配器集合
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogManager.AddLoggerAdapter(Com.JinYiWei.Common.Logging.ILoggerAdapter)">
            <summary>
            添加日志适配器
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogManager.RemoveLoggerAdapter(Com.JinYiWei.Common.Logging.ILoggerAdapter)">
            <summary>
            移除日志适配器
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogManager.SetEntryInfo(System.Boolean,Com.JinYiWei.Common.Logging.LogLevel)">
            <summary>
            设置日志记录入口参数
            </summary>
            <param name="enabled">是否允许记录日志，如为 false，将完全禁止日志记录</param>
            <param name="entryLevel">日志级别的入口控制，级别决定是否执行相应级别的日志记录功能</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogManager.GetLogger(System.String)">
            <summary>
            获取日志记录者实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogManager.GetLogger(System.Type)">
            <summary>
            获取指定类型的日志记录实例
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Logging.LogManager.GetLogger``1">
            <summary>
            获取指定类型的日志记录实例
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Mapper.IMapper">
            <summary>
            定义对象映射功能
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Mapper.IMapper.MapTo``1(System.Object)">
            <summary>
            将对象映射为指定类型
            </summary>
            <typeparam name="TTarget">要映射的目标类型</typeparam>
            <param name="source">源对象</param>
            <returns>目标类型的对象</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Mapper.IMapper.MapTo``2(``0)">
            <summary>
            使用源类型的对象更新目标类型的对象
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TTarget">目标类型</typeparam>
            <param name="source">源对象</param>
            <param name="target">待更新的目标对象</param>
            <returns>更新后的目标类型对象</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Mapper.IMapper.MapListTo``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.AnyRadixConvert_CharacterIsNotValid">
            <summary>
              查找类似 参数中的字符\&quot;{0}\&quot;不是 {1} 进制数的有效字符。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.AnyRadixConvert_Overflow">
            <summary>
              查找类似 0 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.Caching_CacheNotInitialized">
            <summary>
              查找类似 缓存功能尚未初始化，未找到可用的 ICacheProvider 实现。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.ConfigFile_ItemKeyDefineRepeated">
            <summary>
              查找类似 标识为“{0}”的项重复定义 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.ConfigFile_NameToTypeIsNull">
            <summary>
              查找类似 名称为“{0}”的类型不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.Context_BuildServicesFirst">
            <summary>
              查找类似 请先初始化依赖注入服务，再使用OSharpContext.IocRegisterServices属性 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.DbContextInitializerConfig_InitializerNotExists">
            <summary>
              查找类似 上下文初始化类型“{0}”不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.Filter_GroupOperateError">
            <summary>
              查找类似 查询条件组中的操作类型错误，只能为And或者Or。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.Filter_RuleFieldInTypeNotFound">
            <summary>
              查找类似 指定的属性“{0}”在类型“{1}”中不存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.FrameworkInitializer_DatabaseInitializeIsNull">
            <summary>
              查找类似 数据库初始化器不能为空，请确定IoC组件已加载了IDatabaseInitializer的实现类 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.FrameworkInitializer_EntityInfoHandlerIsNull">
            <summary>
              查找类似 数据处理初始化器不能为空，请确定IoC组件已加载了IEntityInfoHandler的实现类 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.FrameworkInitializer_FunctionHandlerIsNull">
            <summary>
              查找类似 数据处理初始化器不能为空，请确定IoC组件已加载了IFunctionHandler的实现类 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.Ioc_CannotResolveService">
            <summary>
              查找类似 无法解析类型“{0}”的构造函数中类型为“{1}”的参数 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.Ioc_FrameworkNotInitialized">
            <summary>
              查找类似 OSharp框架尚未初始化，请先初始化 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.Ioc_ImplementationTypeNotFound">
            <summary>
              查找类似 类型“{0}”的实现类型无法找到 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.Ioc_NoConstructorMatch">
            <summary>
              查找类似 类型“{0}”中找不到合适参数的构造函数 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.Ioc_TryAddIndistinguishableTypeToEnumerable">
            <summary>
              查找类似 实现类型不能为“{0}”，因为该类型与注册为“{1}”的其他类型无法区分 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.IocInitializerBase_TypeNotIRepositoryType">
            <summary>
              查找类似 类型“{0}”不是仓储接口“IRepository&lt;,&gt;”的派生类。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.IocInitializerBase_TypeNotIUnitOfWorkType">
            <summary>
              查找类似 类型“{0}”不是操作单元“IUnitOfWork”的派生类。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.Logging_CreateLogInstanceReturnNull">
            <summary>
              查找类似 创建名称为“{0}”的日志实例时“{1}”返回空实例。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.Map_MapperIsNull">
            <summary>
              查找类似 MapperExtensions.Mapper不能为空，请先设置值 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.Mef_HttpContextItems_NotFoundRequestContainer">
            <summary>
              查找类似 当前Http上下文中不存在Request有效范围的Mef部件容器。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.ObjectExtensions_PropertyNameNotExistsInType">
            <summary>
              查找类似 指定对象中不存在名称为“{0}”的属性。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.ObjectExtensions_PropertyNameNotFixedType">
            <summary>
              查找类似 指定名称“{0}”的属性类型不是“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.ParameterCheck_Between">
            <summary>
              查找类似 参数“{0}”的值必须在“{1}”与“{2}”之间。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.ParameterCheck_BetweenNotEqual">
            <summary>
              查找类似 参数“{0}”的值必须在“{1}”与“{2}”之间，且不能等于“{3}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.ParameterCheck_DirectoryNotExists">
            <summary>
              查找类似 指定的目录路径“{0}”不存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.ParameterCheck_FileNotExists">
            <summary>
              查找类似 指定的文件路径“{0}”不存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.ParameterCheck_NotEmpty_Guid">
            <summary>
              查找类似 参数“{0}”的值不能为Guid.Empty 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.ParameterCheck_NotGreaterThan">
            <summary>
              查找类似 参数“{0}”的值必须大于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.ParameterCheck_NotGreaterThanOrEqual">
            <summary>
              查找类似 参数“{0}”的值必须大于或等于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.ParameterCheck_NotLessThan">
            <summary>
              查找类似 参数“{0}”的值必须小于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.ParameterCheck_NotLessThanOrEqual">
            <summary>
              查找类似 参数“{0}”的值必须小于或等于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.ParameterCheck_NotNull">
            <summary>
              查找类似 参数“{0}”不能为空引用。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.ParameterCheck_NotNullOrEmpty_Collection">
            <summary>
              查找类似 参数“{0}”不能为空引用或空集合。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.ParameterCheck_NotNullOrEmpty_String">
            <summary>
              查找类似 参数“{0}”不能为空引用或空字符串。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.QueryCacheExtensions_TypeNotEntityType">
            <summary>
              查找类似 类型“{0}”不是实体类型 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.Security_DES_KeyLenght">
            <summary>
              查找类似 参数key的长度必须为8或24，当前为{0}。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Properties.Resources.Security_RSA_Sign_HashType">
            <summary>
              查找类似 参数hashType必须为MD5或SHA1 的本地化字符串。
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Reflection.DelegatedExpressionMemberAccessor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Reflection.DynamicMethodMemberAccessor">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Com.JinYiWei.Common.Reflection.IMemberAccessor">
            <summary>
            Abstraction of the function of accessing member of a object at runtime.
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Reflection.IMemberAccessor.GetValue(System.Object,System.String)">
            <summary>
            Get the member value of an object.
            </summary>
            <param name="instance">The object to get the member value from.</param>
            <param name="memberName">The member name, could be the name of a property of field. Must be public member.</param>
            <returns>The member value</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Reflection.IMemberAccessor.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Set the member value of an object.
            </summary>
            <param name="instance">The object to get the member value from.</param>
            <param name="memberName">The member name, could be the name of a property of field. Must be public member.</param>
            <param name="newValue">The new value of the property for the object instance.</param>
        </member>
        <member name="T:Com.JinYiWei.Common.Reflection.ReflectionMemberAccessor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Secutiry.CheckTimeStamp">
            <summary>
            check timestamp
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.CheckTimeStamp.Check(System.String,System.Double)">
            <summary>
            check time stamp
            </summary>
            <param name="timestamp">time stamp</param>
            <param name="timspanExpiredMinutes">expired time</param>
            <returns>if sign is valid,return true;ortherwise return false</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.CheckTimeStamp.IsNum(System.String)">
            <summary>
            is number or not
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Secutiry.CommunicationCryptor">
            <summary>
            结合RSA，DES的通信加密解密操作类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.CommunicationCryptor.#ctor(System.String,System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Secutiry.CommunicationCryptor"/>类型的新实例
            </summary>
            <param name="ownPrivateKey">己方私钥</param>
            <param name="facePublicKey">对方公钥</param>
            <param name="hashType">摘要哈希方式，值必须为MD5或SHA1</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.CommunicationCryptor.DecryptAndVerifyData(System.String)">
            <summary>
            解密接收到的加密数据并验证完整性，如果验证通过返回明文
            </summary>
            <param name="data">接收到的加密数据</param>
            <returns>解密并验证成功后，返回明文</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.CommunicationCryptor.EncryptData(System.String)">
            <summary>
            加密要发送的数据，包含签名，DES加密，RSA加密DES密钥等步骤
            </summary>
            <param name="data">要加密的正文明文数据</param>
            <returns>已加密待发送的密文</returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Secutiry.DesHelper">
            <summary>
            DES / TripleDES加密解密操作类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.DesHelper.#ctor(System.Boolean)">
            <summary>
            使用随机密码初始化一个<see cref="T:Com.JinYiWei.Common.Secutiry.DesHelper"/>类的新实例
            </summary>
            <param name="isTriple">是否使用TripleDES方式，否则为DES方式</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.DesHelper.#ctor(System.Byte[])">
            <summary>
            使用指定8位或24位密码初始化一个<see cref="T:Com.JinYiWei.Common.Secutiry.DesHelper"/>类的新实例
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Secutiry.DesHelper.Key">
            <summary>
            获取 密钥
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.DesHelper.Encrypt(System.Byte[])">
            <summary>
            加密字节数组
            </summary>
            <param name="source">要加密的字节数组</param>
            <returns>加密后的字节数组</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.DesHelper.Decrypt(System.Byte[])">
            <summary>
            解密字节数组
            </summary>
            <param name="source">要解密的字节数组</param>
            <returns>解密后的字节数组</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.DesHelper.Encrypt(System.String)">
            <summary>
            加密字符串，输出BASE64编码字符串
            </summary>
            <param name="source">要加密的明文字符串</param>
            <returns>加密的BASE64编码的字符串</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.DesHelper.Decrypt(System.String)">
            <summary>
            解密字符串，输入为BASE64编码字符串
            </summary>
            <param name="source">要解密的BASE64编码的字符串</param>
            <returns>明文字符串</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.DesHelper.EncryptFile(System.String,System.String)">
            <summary>
            整体加密文件
            </summary>
            <param name="sourceFile">待加密的文件名</param>
            <param name="targetFile">保存加密文件名</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.DesHelper.EncryptFile(System.String,System.String,System.Int32)">
            <summary>
            分段加密文件
            </summary>
            <param name="sourceFile">待加密的文件名</param>
            <param name="targetFile">保存加密文件名</param>
            <param name="sectionLength">分段大小（字节）</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.DesHelper.DecryptFile(System.String,System.String)">
            <summary>
            对文件内容进行DES解密，能自动识别并处理是否为分段加密
            </summary>
            <param name="sourceFile">待加密的文件名</param>
            <param name="targetFile">保存加密文件名</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.DesHelper.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            加密字节数组
            </summary>
            <param name="source">要加密的字节数组</param>
            <param name="key">密钥字节数组，长度为8或者24</param>
            <returns>加密后的字节数组</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.DesHelper.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            解密字节数组
            </summary>
            <param name="source">要解密的字节数组</param>
            <param name="key">密钥字节数组，长度为8或者24</param>
            <returns>解密后的字节数组</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.DesHelper.Encrypt(System.String,System.String)">
            <summary>
            加密字符串，输出BASE64编码字符串
            </summary>
            <param name="source">要加密的明文字符串</param>
            <param name="key">密钥字符串，长度为8或者24</param>
            <returns>加密的BASE64编码的字符串</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.DesHelper.Decrypt(System.String,System.String)">
            <summary>
            解密字符串，输入BASE64编码字符串
            </summary>
            <param name="source">要解密的BASE64编码字符串</param>
            <param name="key">密钥字符串，长度为8或者24</param>
            <returns>解密的明文字符串</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.DesHelper.EncryptFile(System.String,System.String,System.String)">
            <summary>
            整体加密文件
            </summary>
            <param name="sourceFile">待加密的文件名</param>
            <param name="targetFile">保存加密文件名</param>
            <param name="key">密钥字符串，长度为8或者24</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.DesHelper.EncryptFile(System.String,System.String,System.Int32,System.String)">
            <summary>
            分段加密文件
            </summary>
            <param name="sourceFile">待加密的文件名</param>
            <param name="targetFile">保存加密文件名</param>
            <param name="sectionLength">分段大小（字节）</param>
            <param name="key">密钥字符串，长度为8或者24</param>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.DesHelper.DecryptFile(System.String,System.String,System.String)">
            <summary>
            对文件内容进行DES解密，能自动识别并处理是否为分段加密
            </summary>
            <param name="sourceFile">待加密的文件名</param>
            <param name="targetFile">保存加密文件名</param>
            <param name="key">密钥字符串，长度为8或者24</param>
        </member>
        <member name="T:Com.JinYiWei.Common.Secutiry.HashHelper">
            <summary>
            字符串Hash操作类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.HashHelper.GetMd5(System.String,System.Text.Encoding)">
            <summary>
            获取字符串的MD5哈希值，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.HashHelper.GetMd5(System.Byte[])">
            <summary>
            获取字节数组的MD5哈希值
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.HashHelper.GetSha1(System.String,System.Text.Encoding)">
            <summary>
            获取字符串的SHA1哈希值，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.HashHelper.GetSha256(System.String,System.Text.Encoding)">
            <summary>
            获取字符串的Sha256哈希值，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.HashHelper.GetSha512(System.String,System.Text.Encoding)">
            <summary>
            获取字符串的Sha512哈希值，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Secutiry.RsaHelper">
            <summary>
            RSA加密解密操作类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.RsaHelper.#ctor">
            <summary>
            初始化一个<see cref="T:Com.JinYiWei.Common.Secutiry.RsaHelper"/>类的新实例
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Secutiry.RsaHelper.PublicKey">
            <summary>
            获取 公钥
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.Secutiry.RsaHelper.PrivateKey">
            <summary>
            获取 私钥
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.RsaHelper.Encrypt(System.Byte[])">
            <summary>
            加密字节数组
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.RsaHelper.Decrypt(System.Byte[])">
            <summary>
            解密字节数组
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.RsaHelper.SignData(System.Byte[],System.String)">
            <summary>
            对明文进行签名，返回明文签名的字节数组
            </summary>
            <param name="source">要签名的明文字节数组</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <returns>明文签名的字节数组</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.RsaHelper.VerifyData(System.Byte[],System.Byte[],System.String)">
            <summary>
            验证解密得到的明文是否符合签名
            </summary>
            <param name="source">解密的明文字节数组</param>
            <param name="signData">明文签名字节数组</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <returns>验证是否通过</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.RsaHelper.Encrypt(System.String)">
            <summary>
            加密字符串
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.RsaHelper.Decrypt(System.String)">
            <summary>
            解密字符串
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.RsaHelper.SignData(System.String,System.String)">
            <summary>
            对明文进行签名，返回明文签名的BASE64字符串
            </summary>
            <param name="source">要签名的明文</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <returns>明文签名的BASE64字符串</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.RsaHelper.VerifyData(System.String,System.String,System.String)">
            <summary>
            使用指定公钥验证解密得到的明文是否符合签名
            </summary>
            <param name="source">解密后的明文</param>
            <param name="signData">明文的签名</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <returns>验证是否通过</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.RsaHelper.Encrypt(System.Byte[],System.String)">
            <summary>
            使用指定公钥加密字节数组
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.RsaHelper.Decrypt(System.Byte[],System.String)">
            <summary>
            使用私钥解密字节数组
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.RsaHelper.SignData(System.Byte[],System.String,System.String)">
            <summary>
            使用指定私钥对明文进行签名，返回明文签名的字节数组
            </summary>
            <param name="source">要签名的明文字节数组</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <param name="privateKey">私钥</param>
            <returns>明文签名的字节数组</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.RsaHelper.VerifyData(System.Byte[],System.Byte[],System.String,System.String)">
            <summary>
            使用指定公钥验证解密得到的明文是否符合签名
            </summary>
            <param name="source">解密的明文字节数组</param>
            <param name="signData">明文签名字节数组</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <param name="publicKey">公钥</param>
            <returns>验证是否通过</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.RsaHelper.Encrypt(System.String,System.String)">
            <summary>
            使用指定公钥加密字符串
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.RsaHelper.Decrypt(System.String,System.String)">
            <summary>
            使用指定私钥解密字符串
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.RsaHelper.SignData(System.String,System.String,System.String)">
            <summary>
            使用指定私钥签名字符串
            </summary>
            <param name="source">要签名的字符串</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <param name="privateKey">私钥</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.RsaHelper.VerifyData(System.String,System.String,System.String,System.String)">
            <summary>
            使用指定公钥验证解密得到的明文是否符合签名
            </summary>
            <param name="source">解密得到的明文</param>
            <param name="signData">明文签名的BASE64字符串</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <param name="publicKey">公钥</param>
            <returns>验证是否通过</returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Secutiry.SecuritySignHelper">
            <summary>
            sign
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Secutiry.SecuritySignHelper.Appid">
            <summary>
            name of appid in url query
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Secutiry.SecuritySignHelper.Sign">
            <summary>
            name of sign in url query
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.SecuritySignHelper.GetSecuritySign(System.Collections.Specialized.NameValueCollection,System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            获取防篡改签名，组织原始字符串的方式为：先get后post，该签名要求partner在加密时为全小写，同时该方法隐含要求parnter和sign必须通过QueryString方式传递
            </summary>
            <param name="getCollection">通过QueryString方式传递的键值集合,如果内部包含parnter或者sign，相关字段在组织原始字符串时将会被移除</param>
            <param name="appid">合作账号</param>
            <param name="partnerKey">合作Key</param>
            <param name="postCollection">通过Form方式传递的键值集合，如果包含parnter或者sign，此部分不会被做特殊处理</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.SecuritySignHelper.GetMD5_32(System.String,System.Text.Encoding)">
            <summary>
            获取32位长度的Md5摘要
            </summary>
            <param name="inputStr"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Secutiry.SignHelper">
            <summary>
            sign helper
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.SignHelper.GetSign(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String)">
            <summary>
            sign
            </summary>
            <param name="requestParams">add params to sorted dictionary,and use sign_key to sign</param>
            <param name="sign_key">sign key</param>
            <returns>string</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.SignHelper.GetClientSign(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.String)">
            <summary>
            sign
            </summary>
            <param name="requestParams">add params to sorted dictionary,and use sign_key to sign</param>
            <param name="sign_key">sign key</param>
            <returns>string</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Secutiry.SignHelper.GetFullURL(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            拼接URL
            </summary>
            <param name="url"></param>
            <param name="requestParams"></param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.SSM.SSMHelper.SSMPhone(System.String)">
            <summary>
            验证码下发
            </summary>
            <param name="phone">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.SSM.SSMHelper.SSMCodeVerify(System.String,System.String)">
            <summary>
            验证验证码是否正确
            </summary>
            <param name="phone">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.SSM.SSMHelper.GetSSMAccessTokenClient">
            <summary>
            获取accesstoken
            </summary>
            <returns></returns>
        </member>
        <member name="T:Com.JinYiWei.Common.SSM.Submit">
            <summary>
            短信发送
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.SSM.Submit.Appid">
            <summary>
            appid
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.SSM.Submit.Phones">
            <summary>
            接收手机号码，多个手机号码用英文逗号分隔，最多500个
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.SSM.Submit.Content">
            <summary>
            短信内容，最多350个汉字，必填,内容中不要出现【】[]这两种方括号，该字符为签名专用
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.SSM.SubmitResult">
            <summary>
            短信发送结果
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.SSM.SubmitResult.Msgid">
            <summary>
            短信ID
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.SSM.SubmitResult.Result">
            <summary>
            结果类型
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.SSM.SubmitResult.Desc">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.SSM.SubmitResult.FailPhones">
            <summary>
            失败的电话号码
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.SSM.BatchTemp">
            <summary>
            批量短信
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.SSM.BatchTemp.phones">
            <summary>
            电话号码 ，隔开
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.SSM.BatchTemp.content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.SSM.BatchTemp.sign">
            <summary>
            签名
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.SSM.BatchSubmit">
            <summary>
            批量提交
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.SSM.BatchSubmit.Appid">
            <summary>
            appid
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.SSM.BatchSubmit.Data">
            <summary>
            批量提交的数据
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.SSM.BatchSubmitResult">
            <summary>
            批量提交结果
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.SSM.BatchSubmitResult.Result">
            <summary>
            结果类型
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.SSM.BatchSubmitResult.Desc">
            <summary>
            结果消息
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.SSM.BatchSubmitResult.Data">
            <summary>
            返回的数据
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.SSM.BatchSubmitResultData">
            <summary>
            返回消息
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.SSM.BatchSubmitResultData.Msgid">
            <summary>
            信息ID
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.SSM.BatchSubmitResultData.FailPhones">
            <summary>
            失败的号码
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.SSM.BatchSubmitResultData.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.SSM.BatchSubmitResultData.Desc">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.Token.DefaultJsonSerializer">
            <summary>
            JSON Serializer using JavaScriptSerializer
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Token.DefaultJsonSerializer.Serialize(System.Object)">
            <summary>
            Serialize an object to JSON string
            </summary>
            <param name="obj">object</param>
            <returns>JSON string</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Token.DefaultJsonSerializer.Deserialize``1(System.String)">
            <summary>
            Deserialize a JSON string to typed object.
            </summary>
            <typeparam name="T">type of object</typeparam>
            <param name="json">JSON string</param>
            <returns>typed object</returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Token.IJsonSerializer">
            <summary>
            Provides JSON Serialize and Deserialize.  Allows custom serializers used.
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Token.IJsonSerializer.Serialize(System.Object)">
            <summary>
            Serialize an object to JSON string
            </summary>
            <param name="obj">object</param>
            <returns>JSON string</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Token.IJsonSerializer.Deserialize``1(System.String)">
            <summary>
            Deserialize a JSON string to typed object.
            </summary>
            <typeparam name="T">type of object</typeparam>
            <param name="json">JSON string</param>
            <returns>typed object</returns>
        </member>
        <member name="T:Com.JinYiWei.Common.Token.JsonWebToken">
            <summary>
            Provides methods for encoding and decoding JSON Web Tokens.
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.Token.JsonWebToken.JsonSerializer">
            <summary>
            Pluggable JSON Serializer
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.Token.JsonWebToken.Encode(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,System.Byte[],Com.JinYiWei.Common.Token.JwtHashAlgorithm)">
            <summary>
            Creates a JWT given a header, a payload, the signing key, and the algorithm to use.
            </summary>
            <param name="extraHeaders">An arbitrary set of extra headers. Will be augmented with the standard "typ" and "alg" headers.</param>
            <param name="payload">An arbitrary payload (must be serializable to JSON via <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer"/>).</param>
            <param name="key">The key bytes used to sign the token.</param>
            <param name="algorithm">The hash algorithm to use.</param>
            <returns>The generated JWT.</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Token.JsonWebToken.Encode(System.Object,System.Byte[],Com.JinYiWei.Common.Token.JwtHashAlgorithm)">
            <summary>
            Creates a JWT given a payload, the signing key, and the algorithm to use.
            </summary>
            <param name="payload">An arbitrary payload (must be serializable to JSON via <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer"/>).</param>
            <param name="key">The key used to sign the token.</param>
            <param name="algorithm">The hash algorithm to use.</param>
            <returns>The generated JWT.</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Token.JsonWebToken.Encode(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,Com.JinYiWei.Common.Token.JwtHashAlgorithm,System.String)">
            <summary>
            Creates a JWT given a set of arbitrary extra headers, a payload, the signing key, and the algorithm to use.
            </summary>
            <param name="extraHeaders">An arbitrary set of extra headers. Will be augmented with the standard "typ" and "alg" headers.</param>
            <param name="payload">An arbitrary payload (must be serializable to JSON via <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer"/>).</param>
            <param name="key">The key bytes used to sign the token.</param>
            <param name="algorithm">The hash algorithm to use.</param>
            <returns>The generated JWT.</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Token.JsonWebToken.Encode(System.Object,Com.JinYiWei.Common.Token.JwtHashAlgorithm,System.String)">
            <summary>
            Creates a JWT given a payload, the signing key, and the algorithm to use.
            </summary>
            <param name="payload">An arbitrary payload (must be serializable to JSON via <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer"/>).</param>
            <param name="key">The key used to sign the token.</param>
            <param name="algorithm">The hash algorithm to use.</param>
            <returns>The generated JWT.</returns>
        </member>
        <member name="M:Com.JinYiWei.Common.Token.JsonWebToken.Decode(System.String,System.Byte[],System.Boolean)">
            <summary>
            Given a JWT, decode it and return the JSON payload.
            </summary>
            <param name="token">The JWT.</param>
            <param name="key">The key bytes that were used to sign the JWT.</param>
            <param name="verify">Whether to verify the signature (default is true).</param>
            <returns>A string containing the JSON payload.</returns>
            <exception cref="T:Com.JinYiWei.Common.Token.SignatureVerificationException">Thrown if the verify parameter was true and the signature was NOT valid or if the JWT was signed with an unsupported algorithm.</exception>
        </member>
        <member name="M:Com.JinYiWei.Common.Token.JsonWebToken.Decode(System.String,System.String,System.Boolean)">
            <summary>
            Given a JWT, decode it and return the JSON payload.
            </summary>
            <param name="token">The JWT.</param>
            <param name="key">The key that was used to sign the JWT.</param>
            <param name="verify">Whether to verify the signature (default is true).</param>
            <returns>A string containing the JSON payload.</returns>
            <exception cref="T:Com.JinYiWei.Common.Token.SignatureVerificationException">Thrown if the verify parameter was true and the signature was NOT valid or if the JWT was signed with an unsupported algorithm.</exception>
        </member>
        <member name="M:Com.JinYiWei.Common.Token.JsonWebToken.DecodeToObject(System.String,System.Byte[],System.Boolean)">
            <summary>
            Given a JWT, decode it and return the payload as an object (by deserializing it with <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer"/>).
            </summary>
            <param name="token">The JWT.</param>
            <param name="key">The key that was used to sign the JWT.</param>
            <param name="verify">Whether to verify the signature (default is true).</param>
            <returns>An object representing the payload.</returns>
            <exception cref="T:Com.JinYiWei.Common.Token.SignatureVerificationException">Thrown if the verify parameter was true and the signature was NOT valid or if the JWT was signed with an unsupported algorithm.</exception>
        </member>
        <member name="M:Com.JinYiWei.Common.Token.JsonWebToken.DecodeToObject(System.String,System.String,System.Boolean)">
            <summary>
            Given a JWT, decode it and return the payload as an object (by deserializing it with <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer"/>).
            </summary>
            <param name="token">The JWT.</param>
            <param name="key">The key that was used to sign the JWT.</param>
            <param name="verify">Whether to verify the signature (default is true).</param>
            <returns>An object representing the payload.</returns>
            <exception cref="T:Com.JinYiWei.Common.Token.SignatureVerificationException">Thrown if the verify parameter was true and the signature was NOT valid or if the JWT was signed with an unsupported algorithm.</exception>
        </member>
        <member name="M:Com.JinYiWei.Common.Token.JsonWebToken.DecodeToObject``1(System.String,System.Byte[],System.Boolean)">
            <summary>
            Given a JWT, decode it and return the payload as an object (by deserializing it with <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer"/>).
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to return</typeparam>
            <param name="token">The JWT.</param>
            <param name="key">The key that was used to sign the JWT.</param>
            <param name="verify">Whether to verify the signature (default is true).</param>
            <returns>An object representing the payload.</returns>
            <exception cref="T:Com.JinYiWei.Common.Token.SignatureVerificationException">Thrown if the verify parameter was true and the signature was NOT valid or if the JWT was signed with an unsupported algorithm.</exception>
        </member>
        <member name="M:Com.JinYiWei.Common.Token.JsonWebToken.DecodeToObject``1(System.String,System.String,System.Boolean)">
            <summary>
            Given a JWT, decode it and return the payload as an object (by deserializing it with <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer"/>).
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to return</typeparam>
            <param name="token">The JWT.</param>
            <param name="key">The key that was used to sign the JWT.</param>
            <param name="verify">Whether to verify the signature (default is true).</param>
            <returns>An object representing the payload.</returns>
            <exception cref="T:Com.JinYiWei.Common.Token.SignatureVerificationException">Thrown if the verify parameter was true and the signature was NOT valid or if the JWT was signed with an unsupported algorithm.</exception>
        </member>
        <member name="T:Com.JinYiWei.Common.ValidateCoder.ValidateCoder">
            <summary>
            验证码生成类
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.ValidateCoder.ValidateCoder.#ctor">
            <summary>
            初始化<see cref="T:Com.JinYiWei.Common.ValidateCoder.ValidateCoder"/>类的新实例
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.ValidateCoder.ValidateCoder.FontNames">
            <summary>
            获取或设置 字体名称集合
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.ValidateCoder.ValidateCoder.FontNamesForHanzi">
            <summary>
            获取或设置 汉字字体名称集合
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.ValidateCoder.ValidateCoder.FontSize">
            <summary>
            获取或设置 字体大小
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.ValidateCoder.ValidateCoder.FontWidth">
            <summary>
            获取或设置 字体宽度
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.ValidateCoder.ValidateCoder.Height">
            <summary>
            获取或设置 图片高度
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.ValidateCoder.ValidateCoder.BgColor">
            <summary>
            获取或设置 背景颜色
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.ValidateCoder.ValidateCoder.HasBorder">
            <summary>
            获取或设置 是否有边框
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.ValidateCoder.ValidateCoder.RandomPosition">
            <summary>
            获取或设置 是否随机位置
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.ValidateCoder.ValidateCoder.RandomColor">
            <summary>
            获取或设置 是否随机字体颜色
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.ValidateCoder.ValidateCoder.RandomItalic">
            <summary>
            获取或设置 是否随机倾斜字体
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.ValidateCoder.ValidateCoder.RandomPointPercent">
            <summary>
            获取或设置 随机干扰点百分比（百分数形式）
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.ValidateCoder.ValidateCoder.RandomLineCount">
            <summary>
            获取或设置 随机干扰线数量
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.ValidateCoder.ValidateCoder.GetCode(System.Int32,Com.JinYiWei.Common.ValidateCoder.ValidateCodeType)">
            <summary>
            获取指定长度的验证码字符串
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.ValidateCoder.ValidateCoder.CreateImage(System.String,Com.JinYiWei.Common.ValidateCoder.ValidateCodeType)">
            <summary>
            获取指定字符串的验证码图片
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.ValidateCoder.ValidateCoder.CreateImage(System.Int32,System.String@,Com.JinYiWei.Common.ValidateCoder.ValidateCodeType)">
            <summary>
            获取指定长度的验证码图片
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.ValidateCoder.ValidateCoder.GetRandomHanzis(System.Int32)">
            <summary>
            获取汉字验证码
            </summary>
            <param name="length">验证码长度</param>
            <returns></returns>
        </member>
        <member name="T:Com.JinYiWei.Common.ValidateCoder.ValidateCodeType">
            <summary>
            验证码类型
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.ValidateCoder.ValidateCodeType.Number">
            <summary>
            纯数值
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.ValidateCoder.ValidateCodeType.NumberAndLetter">
            <summary>
            数值与字母的组合
            </summary>
        </member>
        <member name="F:Com.JinYiWei.Common.ValidateCoder.ValidateCodeType.Hanzi">
            <summary>
            汉字
            </summary>
        </member>
        <member name="T:Com.JinYiWei.Common.WebAPI.ICommonSignService">
            <summary>
            common sign interface
            </summary>
        </member>
        <member name="M:Com.JinYiWei.Common.WebAPI.ICommonSignService.GetCommonSign">
            <summary>
            get common sign 
            </summary> 
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.WebAPI.ITokenService.VerifyUser(System.String,System.String)">
            <summary>
            verify appid and appsecret
            </summary>
            <param name="appid">appid</param>
            <param name="appsecret">appsecret</param>
            <returns></returns>
        </member>
        <member name="M:Com.JinYiWei.Common.WebAPI.ITokenService.GetExpriedMinutes">
            <summary>
            获取Token有效期时间
            </summary>
            <returns></returns>
        </member>
        <member name="T:Com.JinYiWei.Common.WebAPI.TokenResult">
            <summary>
            Token信息
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.WebAPI.TokenResult.Access_token">
            <summary>
            token
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.WebAPI.TokenResult.Expires_in">
            <summary>
            凭证有效时间，单位：秒
            </summary>
        </member>
        <member name="P:Com.JinYiWei.Common.WebAPI.TokenResult.Roles">
            <summary>
            角色权限
            </summary>
        </member>
    </members>
</doc>
